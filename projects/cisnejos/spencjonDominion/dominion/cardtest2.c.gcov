        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:void assertEqual(int expected, int actual) {
       16:   10:    if (expected == actual) {
       16:   11:        printf("Test Passed\n\n");
       16:   12:    } else {
    #####:   13:         printf("Test Failed\n\n");
        -:   14:    }
       16:   15:}
        -:   16:
        -:   17:int main() {
        -:   18:
        -:   19:	// card variables
        1:   20:	int card = adventurer;
        1:   21:	int choice1 = 0;
        1:   22:	int choice2 = 0;
        1:   23:	int choice3 = 0;
        1:   24:	int handPos = 0;
        1:   25:	int bonus = 0;
        -:   26:
        -:   27:     // Game init variables
        1:   28:    int numberOfPlayers = 2;
        1:   29:    int kindomCards[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   30:    int randomSeed = 1000;
        -:   31:	struct gameState State, StateCopy;
        -:   32:
        -:   33:    // init game
        1:   34:    initializeGame(numberOfPlayers,kindomCards,randomSeed,&State);    
        -:   35:
        -:   36:	// Copy game state
        1:   37:	memcpy(&StateCopy, &State, sizeof(struct gameState));
        -:   38:
        1:   39:	printf("Testing Card: Adventurer\n");
        -:   40:
        -:   41:	// play card
        1:   42:	cardEffect(card, choice1, choice2, choice3, &State, handPos, &bonus);
        -:   43:	
        -:   44:	// check +2 treasure cards
        1:   45:		printf("TEST 1: hand +2 treasure cards\n");
        -:   46:		
        1:   47:		int treasureCardNumActual = 0;
        1:   48:		int treasureCardNumExpected = 0;
        -:   49:
        -:   50:		// check actual
        6:   51:		for (int i = 0; i < State.handCount[0]; i++) {
        -:   52:			
        2:   53:			int card = State.hand[0][i];
        -:   54:
        4:   55:			if (card >= 4 && card  <= 6) {
        2:   56:				treasureCardNumActual++;
        2:   57:			}
        2:   58:		}
        -:   59:
        -:   60:		// check expected
        2:   61:		for (int i = 0; i < StateCopy.handCount[0]; i++) {
        -:   62:			
    #####:   63:			int card = State.hand[0][i];
        -:   64:
    #####:   65:			if (card >= 4 && card  <= 6) {
    #####:   66:				treasureCardNumExpected++;
    #####:   67:			}
    #####:   68:		}
        1:   69:		printf("hand count = %d, expected = %d\n", treasureCardNumActual, treasureCardNumExpected+2);
        1:   70:		assertEqual(treasureCardNumExpected+2, treasureCardNumActual);
        -:   71:
        -:   72:	// No state change should occur for other players.
        1:   73:	printf("TEST 2: No change to player's Deck or Hand\n");
        1:   74:	printf("deck count = %d, expected = %d\n", State.deckCount[1], StateCopy.deckCount[1]);
        1:   75:	assertEqual(StateCopy.deckCount[1], State.deckCount[1]);
        1:   76:	printf("hand count = %d, expected = %d\n", State.handCount[1], StateCopy.handCount[1]);
        1:   77:	assertEqual(StateCopy.handCount[1], State.handCount[1]);
        -:   78:
        -:   79:	// No state change should occur to the victory card piles 
        1:   80:	printf("TEST 3: No change to victory card piles\n");
        8:   81:	for (int i = 1; i <= 3; i++) {
        3:   82:		printf("Card # %d: count = %d, expected = %d\n", i , State.supplyCount[i], StateCopy.supplyCount[i]);
        3:   83:		assertEqual(StateCopy.supplyCount[i], State.supplyCount[i]);
        3:   84:	}
        -:   85:	
        -:   86:	// No state change should occur to the kingdom card piles 
        1:   87:	printf("TEST 4: No change to kindom card piles\n");
       22:   88:	for (int i = 0; i < 10; i++) {
       10:   89:		printf("Card # %d: count = %d, expected = %d\n", kindomCards[i] , State.supplyCount[kindomCards[i]], StateCopy.supplyCount[kindomCards[i]]);
       10:   90:		assertEqual(StateCopy.supplyCount[kindomCards[i]], State.supplyCount[kindomCards[i]]);
       10:   91:	}
        -:   92:
        1:   93:	return 0;
        -:   94:}
