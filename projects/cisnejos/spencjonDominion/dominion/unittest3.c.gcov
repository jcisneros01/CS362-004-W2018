        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:void assertEqual(int expected, int actual) {
        3:   11:    if (expected == actual) {
        3:   12:        printf("Test Passed\n\n");
        3:   13:    } else {
    #####:   14:         printf("Test Failed\n\n");
        -:   15:    }
        3:   16:}
        -:   17:
        -:   18:int main() {
        -:   19:
        1:   20:    srand(time(NULL)); // Seed Random func
        -:   21:
        -:   22:    // Game init variables
        1:   23:    int numberOfPlayers = 2;
        1:   24:    int kindomCards[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   25:    int randomSeed = 1000;
        -:   26:    struct gameState State;
        -:   27:
        1:   28:    printf ("TESTING isGameOver():\n");
        -:   29:
        -:   30:    // init game
        1:   31:    initializeGame(numberOfPlayers,kindomCards,randomSeed,&State);    
        -:   32:
        -:   33:    // Supply cards are not empty
        1:   34:         printf("Test: Game is not over when supply cards including province are not empty \n");
        -:   35:
        1:   36:    assertEqual(0, isGameOver(&State));
        -:   37:    
        -:   38:    // Province Supply pile is empty 
        -:   39:      
        -:   40:        // set province card supply to 0
        1:   41:        State.supplyCount[province] = 0;
        -:   42:
        1:   43:        printf("Test: Game is over when province Supply pile is empty\n");
        -:   44:
        1:   45:        assertEqual(1, isGameOver(&State));
        -:   46:
        -:   47:    // Any three Supply piles are empty
        1:   48:        State.supplyCount[province] = 1;
        -:   49:
        1:   50:        printf("Test: Game is over when any three Supply piles are empty\n");
        -:   51:
        -:   52:        // Set empty piles
        1:   53:        State.supplyCount[0] = 0;
        1:   54:        State.supplyCount[1] = 0;
        1:   55:        State.supplyCount[2] = 0;
        -:   56:
        1:   57:        assertEqual(1, isGameOver(&State));
        -:   58:
        1:   59:    return 0;
        -:   60:}
