        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
    65344:   10:  if (*(int*)a > *(int*)b)
    34053:   11:    return 1;
    31291:   12:  if (*(int*)a < *(int*)b)
    31119:   13:    return -1;
      172:   14:  return 0;
    65344:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  //int it;			
        -:   44:  //set up random number generator
        5:   45:  SelectStream(1);
        5:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       10:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        5:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      110:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     1100:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
      950:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
      500:   66:        }
       50:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        5:   74:  if (numPlayers == 2)
        -:   75:    {
        5:   76:      state->supplyCount[curse] = 10;
        5:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        5:   88:  if (numPlayers == 2)
        -:   89:    {
        5:   90:      state->supplyCount[estate] = 8;
        5:   91:      state->supplyCount[duchy] = 8;
        5:   92:      state->supplyCount[province] = 8;
        5:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        5:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  103:  state->supplyCount[silver] = 40;
        5:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      210:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     1650:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
      775:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
       96:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
        9:  116:		  if (numPlayers == 2){ 
        9:  117:		    state->supplyCount[i] = 8; 
        9:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        9:  120:		}
        -:  121:	      else
        -:  122:		{
       41:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       50:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      725:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
      725:  131:	}
        -:  132:
      100:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       30:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       10:  141:      state->deckCount[i] = 0;
       80:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       30:  144:	  state->deck[i][j] = estate;
       30:  145:	  state->deckCount[i]++;
       30:  146:	}
      160:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
       70:  149:	  state->deck[i][j] = copper;
       70:  150:	  state->deckCount[i]++;		
       70:  151:	}
       10:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       30:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       10:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
       10:  161:    }
        -:  162:
        -:  163:  //draw player hands
       30:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       10:  167:      state->handCount[i] = 0;
       10:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
      120:  170:      for (j = 0; j < 5; j++)
        -:  171:      {
       50:  172:      	  drawCard(i, state);
       50:  173:      }
       10:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      280:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      135:  179:      state->embargoTokens[i] = 0;
      135:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        5:  183:  state->outpostPlayed = 0;
        5:  184:  state->phase = 0;
        5:  185:  state->numActions = 1;
        5:  186:  state->numBuys = 1;
        5:  187:  state->playedCardCount = 0;
        5:  188:  state->whoseTurn = 0;
        5:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        -:  193:  //for (it = 0; it < 5; it++){
        -:  194:  //  drawCard(state->whoseTurn, state);
        -:  195:  //}
        -:  196:
        5:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        5:  199:  return 0;
        5:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       57:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       57:  210:  if (state->deckCount[player] < 1)
        1:  211:    return -1;
       56:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    16586:  215:  while (state->deckCount[player] > 0) {
     8237:  216:    card = floor(Random() * state->deckCount[player]);
     8237:  217:    newDeck[newDeckPos] = state->deck[player][card];
     8237:  218:    newDeckPos++;
  1357946:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   670736:  220:      state->deck[player][i] = state->deck[player][i+1];
   670736:  221:    }
     8237:  222:    state->deckCount[player]--;
        -:  223:  }
    16586:  224:  for (i = 0; i < newDeckPos; i++) {
     8237:  225:    state->deck[player][i] = newDeck[i];
     8237:  226:    state->deckCount[player]++;
     8237:  227:  }
        -:  228:
       56:  229:  return 0;
       57:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       28:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       28:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       28:  244:  if ( state->numActions < 1 )
        -:  245:    {
       23:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        5:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       10:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        5:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        5:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        5:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        5:  270:  return 0;
       28:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       26:  281:  who = state->whoseTurn;
        -:  282:
       26:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       26:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       26:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       26:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       26:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       26:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       26:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       26:  309:  return 0;
       26:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      197:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      428:  317:  int currentPlayer = whoseTurn(state);
      428:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       52:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
    #####:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     6684:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       27:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      334:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      140:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      140:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      140:  360:  }
       27:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       27:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       14:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       14:  366:  }
        -:  367:  else{
       13:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       27:  371:  state->outpostPlayed = 0;
       27:  372:  state->phase = 0;
       27:  373:  state->numActions = 1;
       27:  374:  state->coins = 0;
       27:  375:  state->numBuys = 1;
       27:  376:  state->playedCardCount = 0;
       27:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      324:  381:  for (k = 0; k < 5; k++){
      135:  382:    drawCard(state->whoseTurn, state);//Draw a card
      135:  383:  }
        -:  384:
        -:  385:  //Update money
       27:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       27:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       28:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        1:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       27:  402:  j = 0;
     1404:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      675:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
    #####:  408:	}
      675:  409:    }
       27:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
       27:  415:  return 0;
       28:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       46:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       21:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       23:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       24:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  442:    }
        -:  443:
        -:  444:  //score from deck
       46:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       21:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       23:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       26:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1025499:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    16366:  534:    for (i = 0; i < state->discardCount[player];i++){
     8137:  535:      state->deck[player][i] = state->discard[player][i];
     8137:  536:      state->discard[player][i] = -1;
     8137:  537:    }
        -:  538:
       46:  539:    state->deckCount[player] = state->discardCount[player];
       46:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       46:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       46:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       46:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       46:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       46:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       46:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  564:    state->deckCount[player]--;
       46:  565:    state->handCount[player]++;//Increment hand count
       46:  566:  }
        -:  567:
        -:  568:  else{
  1025453:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1025453:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1025453:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1025453:  577:    state->deckCount[player]--;
  1025453:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1025499:  581:  return 0;
  1025499:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       79:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        1:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
        1:  593:      return 5;
        -:  594:    case province:
       17:  595:      return 8;
        -:  596:    case copper:
        1:  597:      return 0;
        -:  598:    case silver:
       15:  599:      return 3;
        -:  600:    case gold:
       19:  601:      return 6;
        -:  602:    case adventurer:
        5:  603:      return 6;
        -:  604:    case council_room:
        1:  605:      return 5;
        -:  606:    case feast:
        1:  607:      return 4;
        -:  608:    case gardens:
        1:  609:      return 4;
        -:  610:    case mine:
        1:  611:      return 5;
        -:  612:    case remodel:
        1:  613:      return 4;
        -:  614:    case smithy:
        1:  615:      return 4;
        -:  616:    case village:
        1:  617:      return 3;
        -:  618:    case baron:
        1:  619:      return 4;
        -:  620:    case great_hall:
        1:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
        1:  625:      return 3;
        -:  626:    case tribute:
        1:  627:      return 5;
        -:  628:    case ambassador:
        1:  629:      return 3;
        -:  630:    case cutpurse:
        1:  631:      return 4;
        -:  632:    case embargo: 
        1:  633:      return 2;
        -:  634:    case outpost:
        1:  635:      return 5;
        -:  636:    case salvager:
        1:  637:      return 4;
        -:  638:    case sea_hag:
        1:  639:      return 4;
        -:  640:    case treasure_map:
        1:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       79:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
     6005:  654:  int currentPlayer = whoseTurn(state);
     6005:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
     6005:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        -:  660:  
     6005:  661:  if (nextPlayer > (state->numPlayers - 1)){
     2983:  662:    nextPlayer = 0;
     2983:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6005:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
     2005:  670:      return adventurer_effect(state, currentPlayer);
        -:  671:
        -:  672:    case council_room:
    #####:  673:      return council_room_effect(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
     2000:  793:      return smithy_effect(currentPlayer, state, handPos);
        -:  794:		
        -:  795:    case village:
     2000:  796:      return village_effect(currentPlayer, state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baron_effect(currentPlayer, state, handPos, choice1);
        -:  800:		
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
     6005: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
     8000: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
     8000: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8000: 1131:      state->playedCardCount++;
     8000: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
     8000: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
     8000: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
        4: 1141:      state->handCount[currentPlayer]--;
        4: 1142:    }
     7996: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
     7996: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
     7996: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
     7996: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
     8000: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
       26: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
       26: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
       26: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       26: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
       26: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
       26: 1195:  return 0;
       26: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
       37: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
      414: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
      170: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
       54: 1210:	  state->coins += 1;
       54: 1211:	}
      116: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
       44: 1214:	  state->coins += 2;
       44: 1215:	}
       72: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
       19: 1218:	  state->coins += 3;
       19: 1219:	}	
      170: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
       37: 1223:  state->coins += bonus;
        -: 1224:
       37: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int smithy_effect(int currentPlayer, struct gameState *state, int handPos){ //draw 3 cards
        -: 1229:    int i;
    16000: 1230:    for (i = 0; i < 3; i++)
        -: 1231:    {
     6000: 1232:      drawCard(currentPlayer, state);
     6000: 1233:    }
        -: 1234:        
        -: 1235:    //discard card from hand
     2000: 1236:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1237:    return -1;
        -: 1238:}
        -: 1239:
        -: 1240:int adventurer_effect(struct gameState *state, int currentPlayer){
        -: 1241:    int cardDrawn;
        -: 1242:    int temphand[MAX_HAND];
     2005: 1243:    int z = 0;
     2005: 1244:    int drawntreasure=0;
        -: 1245:    //printf("Inside Adventurer \n");
  1013340: 1246:    while(drawntreasure<2){
   504665: 1247:        if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
        1: 1248:            shuffle(currentPlayer, state);
        1: 1249:        }
   504665: 1250:        drawCard(currentPlayer, state);
   504665: 1251:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1509983: 1252:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4010: 1253:            drawntreasure++;
        -: 1254:        else{
   500655: 1255:            temphand[z]=cardDrawn;
   500655: 1256:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   500655: 1257:            z++;
        -: 1258:        }
        -: 1259:    }
  1005320: 1260:    while(z-1>=0){
   500655: 1261:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   500655: 1262:        z=z-1;
        -: 1263:    }
     2005: 1264:    return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int village_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1268://+1 Card
     2000: 1269:    drawCard(currentPlayer, state);
        -: 1270:        
        -: 1271:    //+2 Actions 
     2000: 1272:    state->numActions = state->numActions + 2;
        -: 1273:        
        -: 1274:    //discard played card from hand
     2000: 1275:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int baron_effect(int currentPlayer, struct gameState *state, int handPos, int choice1){
    #####: 1280:    state->numBuys++;//Increase buys by 1!
    #####: 1281:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1282:	int p = 0;//Iterator for hand!
    #####: 1283:	int card_not_discarded = 0;//Flag for discard set!
    #####: 1284:	while(card_not_discarded){
    #####: 1285:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1286:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1287:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1288:	    state->discardCount[currentPlayer]++;
    #####: 1289:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1290:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1291:	    }
    #####: 1292:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1293:	    state->handCount[currentPlayer]--;
    #####: 1294:	    card_not_discarded = 0;//Exit the loop
    #####: 1295:	  }
    #####: 1296:	  else if (p > state->handCount[currentPlayer]){
        -: 1297:	    if(DEBUG) {
        -: 1298:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1299:	      printf("Must gain an estate if there are any\n");
        -: 1300:	    }
    #####: 1301:	    if (supplyCount(estate, state) > 0){
    #####: 1302:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1303:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1304:	      if (supplyCount(estate, state) == 0){
    #####: 1305:		isGameOver(state);
    #####: 1306:	      }
    #####: 1307:	    }
    #####: 1308:	    card_not_discarded = 0;//Exit the loop
    #####: 1309:	  }
        -: 1310:			    
        -: 1311:	  else{
    #####: 1312:	    p++;//Next card
        -: 1313:	  }
        -: 1314:	}
    #####: 1315:      }
        -: 1316:			    
        -: 1317:      else{
    #####: 1318:	if (supplyCount(estate, state) > 0){
    #####: 1319:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1320:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1321:	  if (supplyCount(estate, state) == 0){
    #####: 1322:	    isGameOver(state);
    #####: 1323:	  }
    #####: 1324:	}
        -: 1325:      }
    #####: 1326:    return 0;
        -: 1327:}
        -: 1328:
        -: 1329:int council_room_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1330:    int i;
        -: 1331:    
        -: 1332:    //+4 Cards
    #####: 1333:      for (i = 0; i < 4; i++)
        -: 1334:	{
    #####: 1335:	  drawCard(currentPlayer, state);
    #####: 1336:	}
        -: 1337:			
        -: 1338:      //+1 Buy
    #####: 1339:      state->numBuys++;
        -: 1340:			
        -: 1341:      //Each other player draws a card
    #####: 1342:      for (i = 0; i < state->numPlayers; i++)
        -: 1343:	{
    #####: 1344:	  if ( i != currentPlayer )
        -: 1345:	    {
    #####: 1346:	      drawCard(i, state);
    #####: 1347:	    }
    #####: 1348:	}
        -: 1349:			
        -: 1350:      //put played card in played card pile
    #####: 1351:      discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:      return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of cards.c
        -: 1358://end of dominion.c
        -: 1359:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
    65372:   10:  if (*(int*)a > *(int*)b)
    34053:   11:    return 1;
    31319:   12:  if (*(int*)a < *(int*)b)
    31129:   13:    return -1;
      190:   14:  return 0;
    65372:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  //int it;			
        -:   44:  //set up random number generator
        6:   45:  SelectStream(1);
        6:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       12:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        6:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      132:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     1320:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     1140:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
      600:   66:        }
       60:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        6:   74:  if (numPlayers == 2)
        -:   75:    {
        6:   76:      state->supplyCount[curse] = 10;
        6:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        6:   88:  if (numPlayers == 2)
        -:   89:    {
        6:   90:      state->supplyCount[estate] = 8;
        6:   91:      state->supplyCount[duchy] = 8;
        6:   92:      state->supplyCount[province] = 8;
        6:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        6:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  103:  state->supplyCount[silver] = 40;
        6:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      252:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     1980:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
      930:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      115:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       11:  116:		  if (numPlayers == 2){ 
       11:  117:		    state->supplyCount[i] = 8; 
       11:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
       11:  120:		}
        -:  121:	      else
        -:  122:		{
       49:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       60:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      870:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
      870:  131:	}
        -:  132:
      120:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       36:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       12:  141:      state->deckCount[i] = 0;
       96:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       36:  144:	  state->deck[i][j] = estate;
       36:  145:	  state->deckCount[i]++;
       36:  146:	}
      192:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
       84:  149:	  state->deck[i][j] = copper;
       84:  150:	  state->deckCount[i]++;		
       84:  151:	}
       12:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       36:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       12:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
       12:  161:    }
        -:  162:
        -:  163:  //draw player hands
       36:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       12:  167:      state->handCount[i] = 0;
       12:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
      144:  170:      for (j = 0; j < 5; j++)
        -:  171:      {
       60:  172:      	  drawCard(i, state);
       60:  173:      }
       12:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      336:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      162:  179:      state->embargoTokens[i] = 0;
      162:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        6:  183:  state->outpostPlayed = 0;
        6:  184:  state->phase = 0;
        6:  185:  state->numActions = 1;
        6:  186:  state->numBuys = 1;
        6:  187:  state->playedCardCount = 0;
        6:  188:  state->whoseTurn = 0;
        6:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        -:  193:  //for (it = 0; it < 5; it++){
        -:  194:  //  drawCard(state->whoseTurn, state);
        -:  195:  //}
        -:  196:
        6:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        6:  199:  return 0;
        6:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       59:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       59:  210:  if (state->deckCount[player] < 1)
        1:  211:    return -1;
       58:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    16630:  215:  while (state->deckCount[player] > 0) {
     8257:  216:    card = floor(Random() * state->deckCount[player]);
     8257:  217:    newDeck[newDeckPos] = state->deck[player][card];
     8257:  218:    newDeckPos++;
  1358086:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   670786:  220:      state->deck[player][i] = state->deck[player][i+1];
   670786:  221:    }
     8257:  222:    state->deckCount[player]--;
        -:  223:  }
    16630:  224:  for (i = 0; i < newDeckPos; i++) {
     8257:  225:    state->deck[player][i] = newDeck[i];
     8257:  226:    state->deckCount[player]++;
     8257:  227:  }
        -:  228:
       58:  229:  return 0;
       59:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       28:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       28:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       28:  244:  if ( state->numActions < 1 )
        -:  245:    {
       23:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        5:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       10:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        5:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        5:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        5:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        5:  270:  return 0;
       28:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       26:  281:  who = state->whoseTurn;
        -:  282:
       26:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       26:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       26:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       26:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       26:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       26:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       26:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       26:  309:  return 0;
       26:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      197:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      428:  317:  int currentPlayer = whoseTurn(state);
      428:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       52:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
    #####:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     6684:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       27:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      334:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      140:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      140:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      140:  360:  }
       27:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       27:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       14:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       14:  366:  }
        -:  367:  else{
       13:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       27:  371:  state->outpostPlayed = 0;
       27:  372:  state->phase = 0;
       27:  373:  state->numActions = 1;
       27:  374:  state->coins = 0;
       27:  375:  state->numBuys = 1;
       27:  376:  state->playedCardCount = 0;
       27:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      324:  381:  for (k = 0; k < 5; k++){
      135:  382:    drawCard(state->whoseTurn, state);//Draw a card
      135:  383:  }
        -:  384:
        -:  385:  //Update money
       27:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       27:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       28:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        1:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       27:  402:  j = 0;
     1404:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      675:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
    #####:  408:	}
      675:  409:    }
       27:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
       27:  415:  return 0;
       28:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       46:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       21:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       23:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       24:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  442:    }
        -:  443:
        -:  444:  //score from deck
       46:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       21:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       23:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       26:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1025509:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    16366:  534:    for (i = 0; i < state->discardCount[player];i++){
     8137:  535:      state->deck[player][i] = state->discard[player][i];
     8137:  536:      state->discard[player][i] = -1;
     8137:  537:    }
        -:  538:
       46:  539:    state->deckCount[player] = state->discardCount[player];
       46:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       46:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       46:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       46:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       46:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       46:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       46:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  564:    state->deckCount[player]--;
       46:  565:    state->handCount[player]++;//Increment hand count
       46:  566:  }
        -:  567:
        -:  568:  else{
  1025463:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1025463:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1025463:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1025463:  577:    state->deckCount[player]--;
  1025463:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1025509:  581:  return 0;
  1025509:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       79:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        1:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
        1:  593:      return 5;
        -:  594:    case province:
       17:  595:      return 8;
        -:  596:    case copper:
        1:  597:      return 0;
        -:  598:    case silver:
       15:  599:      return 3;
        -:  600:    case gold:
       19:  601:      return 6;
        -:  602:    case adventurer:
        5:  603:      return 6;
        -:  604:    case council_room:
        1:  605:      return 5;
        -:  606:    case feast:
        1:  607:      return 4;
        -:  608:    case gardens:
        1:  609:      return 4;
        -:  610:    case mine:
        1:  611:      return 5;
        -:  612:    case remodel:
        1:  613:      return 4;
        -:  614:    case smithy:
        1:  615:      return 4;
        -:  616:    case village:
        1:  617:      return 3;
        -:  618:    case baron:
        1:  619:      return 4;
        -:  620:    case great_hall:
        1:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
        1:  625:      return 3;
        -:  626:    case tribute:
        1:  627:      return 5;
        -:  628:    case ambassador:
        1:  629:      return 3;
        -:  630:    case cutpurse:
        1:  631:      return 4;
        -:  632:    case embargo: 
        1:  633:      return 2;
        -:  634:    case outpost:
        1:  635:      return 5;
        -:  636:    case salvager:
        1:  637:      return 4;
        -:  638:    case sea_hag:
        1:  639:      return 4;
        -:  640:    case treasure_map:
        1:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       79:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
     6005:  654:  int currentPlayer = whoseTurn(state);
     6005:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
     6005:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        -:  660:  
     6005:  661:  if (nextPlayer > (state->numPlayers - 1)){
     2983:  662:    nextPlayer = 0;
     2983:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6005:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
     2005:  670:      return adventurer_effect(state, currentPlayer);
        -:  671:
        -:  672:    case council_room:
    #####:  673:      return council_room_effect(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
     2000:  793:      return smithy_effect(currentPlayer, state, handPos);
        -:  794:		
        -:  795:    case village:
     2000:  796:      return village_effect(currentPlayer, state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baron_effect(currentPlayer, state, handPos, choice1);
        -:  800:		
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
     6005: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
     8000: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
     8000: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8000: 1131:      state->playedCardCount++;
     8000: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
     8000: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
     8000: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
        4: 1141:      state->handCount[currentPlayer]--;
        4: 1142:    }
     7996: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
     7996: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
     7996: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
     7996: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
     8000: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
       26: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
       26: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
       26: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       26: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
       26: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
       26: 1195:  return 0;
       26: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
       42: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
      424: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
      170: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
       54: 1210:	  state->coins += 1;
       54: 1211:	}
      116: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
       44: 1214:	  state->coins += 2;
       44: 1215:	}
       72: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
       19: 1218:	  state->coins += 3;
       19: 1219:	}	
      170: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
       42: 1223:  state->coins += bonus;
        -: 1224:
       42: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int smithy_effect(int currentPlayer, struct gameState *state, int handPos){ //draw 3 cards
        -: 1229:    int i;
    16000: 1230:    for (i = 0; i < 3; i++)
        -: 1231:    {
     6000: 1232:      drawCard(currentPlayer, state);
     6000: 1233:    }
        -: 1234:        
        -: 1235:    //discard card from hand
     2000: 1236:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1237:    return -1;
        -: 1238:}
        -: 1239:
        -: 1240:int adventurer_effect(struct gameState *state, int currentPlayer){
        -: 1241:    int cardDrawn;
        -: 1242:    int temphand[MAX_HAND];
     2005: 1243:    int z = 0;
     2005: 1244:    int drawntreasure=0;
        -: 1245:    //printf("Inside Adventurer \n");
  1013340: 1246:    while(drawntreasure<2){
   504665: 1247:        if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
        1: 1248:            shuffle(currentPlayer, state);
        1: 1249:        }
   504665: 1250:        drawCard(currentPlayer, state);
   504665: 1251:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1509983: 1252:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4010: 1253:            drawntreasure++;
        -: 1254:        else{
   500655: 1255:            temphand[z]=cardDrawn;
   500655: 1256:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   500655: 1257:            z++;
        -: 1258:        }
        -: 1259:    }
  1005320: 1260:    while(z-1>=0){
   500655: 1261:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   500655: 1262:        z=z-1;
        -: 1263:    }
     2005: 1264:    return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int village_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1268://+1 Card
     2000: 1269:    drawCard(currentPlayer, state);
        -: 1270:        
        -: 1271:    //+2 Actions 
     2000: 1272:    state->numActions = state->numActions + 2;
        -: 1273:        
        -: 1274:    //discard played card from hand
     2000: 1275:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int baron_effect(int currentPlayer, struct gameState *state, int handPos, int choice1){
    #####: 1280:    state->numBuys++;//Increase buys by 1!
    #####: 1281:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1282:	int p = 0;//Iterator for hand!
    #####: 1283:	int card_not_discarded = 0;//Flag for discard set!
    #####: 1284:	while(card_not_discarded){
    #####: 1285:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1286:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1287:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1288:	    state->discardCount[currentPlayer]++;
    #####: 1289:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1290:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1291:	    }
    #####: 1292:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1293:	    state->handCount[currentPlayer]--;
    #####: 1294:	    card_not_discarded = 0;//Exit the loop
    #####: 1295:	  }
    #####: 1296:	  else if (p > state->handCount[currentPlayer]){
        -: 1297:	    if(DEBUG) {
        -: 1298:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1299:	      printf("Must gain an estate if there are any\n");
        -: 1300:	    }
    #####: 1301:	    if (supplyCount(estate, state) > 0){
    #####: 1302:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1303:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1304:	      if (supplyCount(estate, state) == 0){
    #####: 1305:		isGameOver(state);
    #####: 1306:	      }
    #####: 1307:	    }
    #####: 1308:	    card_not_discarded = 0;//Exit the loop
    #####: 1309:	  }
        -: 1310:			    
        -: 1311:	  else{
    #####: 1312:	    p++;//Next card
        -: 1313:	  }
        -: 1314:	}
    #####: 1315:      }
        -: 1316:			    
        -: 1317:      else{
    #####: 1318:	if (supplyCount(estate, state) > 0){
    #####: 1319:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1320:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1321:	  if (supplyCount(estate, state) == 0){
    #####: 1322:	    isGameOver(state);
    #####: 1323:	  }
    #####: 1324:	}
        -: 1325:      }
    #####: 1326:    return 0;
        -: 1327:}
        -: 1328:
        -: 1329:int council_room_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1330:    int i;
        -: 1331:    
        -: 1332:    //+4 Cards
    #####: 1333:      for (i = 0; i < 4; i++)
        -: 1334:	{
    #####: 1335:	  drawCard(currentPlayer, state);
    #####: 1336:	}
        -: 1337:			
        -: 1338:      //+1 Buy
    #####: 1339:      state->numBuys++;
        -: 1340:			
        -: 1341:      //Each other player draws a card
    #####: 1342:      for (i = 0; i < state->numPlayers; i++)
        -: 1343:	{
    #####: 1344:	  if ( i != currentPlayer )
        -: 1345:	    {
    #####: 1346:	      drawCard(i, state);
    #####: 1347:	    }
    #####: 1348:	}
        -: 1349:			
        -: 1350:      //put played card in played card pile
    #####: 1351:      discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:      return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of cards.c
        -: 1358://end of dominion.c
        -: 1359:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
    65400:   10:  if (*(int*)a > *(int*)b)
    34053:   11:    return 1;
    31347:   12:  if (*(int*)a < *(int*)b)
    31139:   13:    return -1;
      208:   14:  return 0;
    65400:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  //int it;			
        -:   44:  //set up random number generator
        7:   45:  SelectStream(1);
        7:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       14:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        7:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      154:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     1540:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     1330:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
      700:   66:        }
       70:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        7:   74:  if (numPlayers == 2)
        -:   75:    {
        7:   76:      state->supplyCount[curse] = 10;
        7:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        7:   88:  if (numPlayers == 2)
        -:   89:    {
        7:   90:      state->supplyCount[estate] = 8;
        7:   91:      state->supplyCount[duchy] = 8;
        7:   92:      state->supplyCount[province] = 8;
        7:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        7:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  103:  state->supplyCount[silver] = 40;
        7:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      294:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     2310:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
     1085:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      134:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       13:  116:		  if (numPlayers == 2){ 
       13:  117:		    state->supplyCount[i] = 8; 
       13:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
       13:  120:		}
        -:  121:	      else
        -:  122:		{
       57:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       70:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     1015:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
     1015:  131:	}
        -:  132:
      140:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       42:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       14:  141:      state->deckCount[i] = 0;
      112:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       42:  144:	  state->deck[i][j] = estate;
       42:  145:	  state->deckCount[i]++;
       42:  146:	}
      224:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
       98:  149:	  state->deck[i][j] = copper;
       98:  150:	  state->deckCount[i]++;		
       98:  151:	}
       14:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       42:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       14:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
       14:  161:    }
        -:  162:
        -:  163:  //draw player hands
       42:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       14:  167:      state->handCount[i] = 0;
       14:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
      168:  170:      for (j = 0; j < 5; j++)
        -:  171:      {
       70:  172:      	  drawCard(i, state);
       70:  173:      }
       14:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      392:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      189:  179:      state->embargoTokens[i] = 0;
      189:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        7:  183:  state->outpostPlayed = 0;
        7:  184:  state->phase = 0;
        7:  185:  state->numActions = 1;
        7:  186:  state->numBuys = 1;
        7:  187:  state->playedCardCount = 0;
        7:  188:  state->whoseTurn = 0;
        7:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        -:  193:  //for (it = 0; it < 5; it++){
        -:  194:  //  drawCard(state->whoseTurn, state);
        -:  195:  //}
        -:  196:
        7:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        7:  199:  return 0;
        7:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       61:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       61:  210:  if (state->deckCount[player] < 1)
        1:  211:    return -1;
       60:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    16674:  215:  while (state->deckCount[player] > 0) {
     8277:  216:    card = floor(Random() * state->deckCount[player]);
     8277:  217:    newDeck[newDeckPos] = state->deck[player][card];
     8277:  218:    newDeckPos++;
  1358226:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   670836:  220:      state->deck[player][i] = state->deck[player][i+1];
   670836:  221:    }
     8277:  222:    state->deckCount[player]--;
        -:  223:  }
    16674:  224:  for (i = 0; i < newDeckPos; i++) {
     8277:  225:    state->deck[player][i] = newDeck[i];
     8277:  226:    state->deckCount[player]++;
     8277:  227:  }
        -:  228:
       60:  229:  return 0;
       61:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       28:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       28:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       28:  244:  if ( state->numActions < 1 )
        -:  245:    {
       23:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        5:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       10:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        5:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        5:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        5:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        5:  270:  return 0;
       28:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       26:  281:  who = state->whoseTurn;
        -:  282:
       26:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       26:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       26:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       26:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       26:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       26:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       26:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       26:  309:  return 0;
       26:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      197:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      428:  317:  int currentPlayer = whoseTurn(state);
      428:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       52:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
    #####:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     6684:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       27:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      334:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      140:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      140:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      140:  360:  }
       27:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       27:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       14:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       14:  366:  }
        -:  367:  else{
       13:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       27:  371:  state->outpostPlayed = 0;
       27:  372:  state->phase = 0;
       27:  373:  state->numActions = 1;
       27:  374:  state->coins = 0;
       27:  375:  state->numBuys = 1;
       27:  376:  state->playedCardCount = 0;
       27:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      324:  381:  for (k = 0; k < 5; k++){
      135:  382:    drawCard(state->whoseTurn, state);//Draw a card
      135:  383:  }
        -:  384:
        -:  385:  //Update money
       27:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       27:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       31:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        2:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       29:  402:  j = 0;
     1508:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      725:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
        3:  407:	  j++;
        3:  408:	}
      725:  409:    }
       29:  410:  if ( j >= 3)
        -:  411:    {
        1:  412:      return 1;
        -:  413:    }
        -:  414:
       28:  415:  return 0;
       31:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       46:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       21:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       23:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       24:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  442:    }
        -:  443:
        -:  444:  //score from deck
       46:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       21:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       23:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       26:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1025519:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    16366:  534:    for (i = 0; i < state->discardCount[player];i++){
     8137:  535:      state->deck[player][i] = state->discard[player][i];
     8137:  536:      state->discard[player][i] = -1;
     8137:  537:    }
        -:  538:
       46:  539:    state->deckCount[player] = state->discardCount[player];
       46:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       46:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       46:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       46:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       46:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       46:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       46:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  564:    state->deckCount[player]--;
       46:  565:    state->handCount[player]++;//Increment hand count
       46:  566:  }
        -:  567:
        -:  568:  else{
  1025473:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1025473:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1025473:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1025473:  577:    state->deckCount[player]--;
  1025473:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1025519:  581:  return 0;
  1025519:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       79:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        1:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
        1:  593:      return 5;
        -:  594:    case province:
       17:  595:      return 8;
        -:  596:    case copper:
        1:  597:      return 0;
        -:  598:    case silver:
       15:  599:      return 3;
        -:  600:    case gold:
       19:  601:      return 6;
        -:  602:    case adventurer:
        5:  603:      return 6;
        -:  604:    case council_room:
        1:  605:      return 5;
        -:  606:    case feast:
        1:  607:      return 4;
        -:  608:    case gardens:
        1:  609:      return 4;
        -:  610:    case mine:
        1:  611:      return 5;
        -:  612:    case remodel:
        1:  613:      return 4;
        -:  614:    case smithy:
        1:  615:      return 4;
        -:  616:    case village:
        1:  617:      return 3;
        -:  618:    case baron:
        1:  619:      return 4;
        -:  620:    case great_hall:
        1:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
        1:  625:      return 3;
        -:  626:    case tribute:
        1:  627:      return 5;
        -:  628:    case ambassador:
        1:  629:      return 3;
        -:  630:    case cutpurse:
        1:  631:      return 4;
        -:  632:    case embargo: 
        1:  633:      return 2;
        -:  634:    case outpost:
        1:  635:      return 5;
        -:  636:    case salvager:
        1:  637:      return 4;
        -:  638:    case sea_hag:
        1:  639:      return 4;
        -:  640:    case treasure_map:
        1:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       79:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
     6005:  654:  int currentPlayer = whoseTurn(state);
     6005:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
     6005:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        -:  660:  
     6005:  661:  if (nextPlayer > (state->numPlayers - 1)){
     2983:  662:    nextPlayer = 0;
     2983:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6005:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
     2005:  670:      return adventurer_effect(state, currentPlayer);
        -:  671:
        -:  672:    case council_room:
    #####:  673:      return council_room_effect(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
     2000:  793:      return smithy_effect(currentPlayer, state, handPos);
        -:  794:		
        -:  795:    case village:
     2000:  796:      return village_effect(currentPlayer, state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baron_effect(currentPlayer, state, handPos, choice1);
        -:  800:		
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
     6005: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
     8000: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
     8000: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8000: 1131:      state->playedCardCount++;
     8000: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
     8000: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
     8000: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
        4: 1141:      state->handCount[currentPlayer]--;
        4: 1142:    }
     7996: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
     7996: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
     7996: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
     7996: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
     8000: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
       26: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
       26: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
       26: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       26: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
       26: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
       26: 1195:  return 0;
       26: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
       43: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
      426: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
      170: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
       54: 1210:	  state->coins += 1;
       54: 1211:	}
      116: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
       44: 1214:	  state->coins += 2;
       44: 1215:	}
       72: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
       19: 1218:	  state->coins += 3;
       19: 1219:	}	
      170: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
       43: 1223:  state->coins += bonus;
        -: 1224:
       43: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int smithy_effect(int currentPlayer, struct gameState *state, int handPos){ //draw 3 cards
        -: 1229:    int i;
    16000: 1230:    for (i = 0; i < 3; i++)
        -: 1231:    {
     6000: 1232:      drawCard(currentPlayer, state);
     6000: 1233:    }
        -: 1234:        
        -: 1235:    //discard card from hand
     2000: 1236:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1237:    return -1;
        -: 1238:}
        -: 1239:
        -: 1240:int adventurer_effect(struct gameState *state, int currentPlayer){
        -: 1241:    int cardDrawn;
        -: 1242:    int temphand[MAX_HAND];
     2005: 1243:    int z = 0;
     2005: 1244:    int drawntreasure=0;
        -: 1245:    //printf("Inside Adventurer \n");
  1013340: 1246:    while(drawntreasure<2){
   504665: 1247:        if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
        1: 1248:            shuffle(currentPlayer, state);
        1: 1249:        }
   504665: 1250:        drawCard(currentPlayer, state);
   504665: 1251:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1509983: 1252:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4010: 1253:            drawntreasure++;
        -: 1254:        else{
   500655: 1255:            temphand[z]=cardDrawn;
   500655: 1256:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   500655: 1257:            z++;
        -: 1258:        }
        -: 1259:    }
  1005320: 1260:    while(z-1>=0){
   500655: 1261:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   500655: 1262:        z=z-1;
        -: 1263:    }
     2005: 1264:    return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int village_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1268://+1 Card
     2000: 1269:    drawCard(currentPlayer, state);
        -: 1270:        
        -: 1271:    //+2 Actions 
     2000: 1272:    state->numActions = state->numActions + 2;
        -: 1273:        
        -: 1274:    //discard played card from hand
     2000: 1275:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int baron_effect(int currentPlayer, struct gameState *state, int handPos, int choice1){
    #####: 1280:    state->numBuys++;//Increase buys by 1!
    #####: 1281:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1282:	int p = 0;//Iterator for hand!
    #####: 1283:	int card_not_discarded = 0;//Flag for discard set!
    #####: 1284:	while(card_not_discarded){
    #####: 1285:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1286:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1287:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1288:	    state->discardCount[currentPlayer]++;
    #####: 1289:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1290:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1291:	    }
    #####: 1292:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1293:	    state->handCount[currentPlayer]--;
    #####: 1294:	    card_not_discarded = 0;//Exit the loop
    #####: 1295:	  }
    #####: 1296:	  else if (p > state->handCount[currentPlayer]){
        -: 1297:	    if(DEBUG) {
        -: 1298:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1299:	      printf("Must gain an estate if there are any\n");
        -: 1300:	    }
    #####: 1301:	    if (supplyCount(estate, state) > 0){
    #####: 1302:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1303:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1304:	      if (supplyCount(estate, state) == 0){
    #####: 1305:		isGameOver(state);
    #####: 1306:	      }
    #####: 1307:	    }
    #####: 1308:	    card_not_discarded = 0;//Exit the loop
    #####: 1309:	  }
        -: 1310:			    
        -: 1311:	  else{
    #####: 1312:	    p++;//Next card
        -: 1313:	  }
        -: 1314:	}
    #####: 1315:      }
        -: 1316:			    
        -: 1317:      else{
    #####: 1318:	if (supplyCount(estate, state) > 0){
    #####: 1319:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1320:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1321:	  if (supplyCount(estate, state) == 0){
    #####: 1322:	    isGameOver(state);
    #####: 1323:	  }
    #####: 1324:	}
        -: 1325:      }
    #####: 1326:    return 0;
        -: 1327:}
        -: 1328:
        -: 1329:int council_room_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1330:    int i;
        -: 1331:    
        -: 1332:    //+4 Cards
    #####: 1333:      for (i = 0; i < 4; i++)
        -: 1334:	{
    #####: 1335:	  drawCard(currentPlayer, state);
    #####: 1336:	}
        -: 1337:			
        -: 1338:      //+1 Buy
    #####: 1339:      state->numBuys++;
        -: 1340:			
        -: 1341:      //Each other player draws a card
    #####: 1342:      for (i = 0; i < state->numPlayers; i++)
        -: 1343:	{
    #####: 1344:	  if ( i != currentPlayer )
        -: 1345:	    {
    #####: 1346:	      drawCard(i, state);
    #####: 1347:	    }
    #####: 1348:	}
        -: 1349:			
        -: 1350:      //put played card in played card pile
    #####: 1351:      discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:      return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of cards.c
        -: 1358://end of dominion.c
        -: 1359:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
    65428:   10:  if (*(int*)a > *(int*)b)
    34053:   11:    return 1;
    31375:   12:  if (*(int*)a < *(int*)b)
    31149:   13:    return -1;
      226:   14:  return 0;
    65428:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  //int it;			
        -:   44:  //set up random number generator
        8:   45:  SelectStream(1);
        8:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       16:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        8:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      176:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     1760:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     1520:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
      800:   66:        }
       80:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        8:   74:  if (numPlayers == 2)
        -:   75:    {
        8:   76:      state->supplyCount[curse] = 10;
        8:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        8:   88:  if (numPlayers == 2)
        -:   89:    {
        8:   90:      state->supplyCount[estate] = 8;
        8:   91:      state->supplyCount[duchy] = 8;
        8:   92:      state->supplyCount[province] = 8;
        8:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        8:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  103:  state->supplyCount[silver] = 40;
        8:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      336:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     2640:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
     1240:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      153:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       15:  116:		  if (numPlayers == 2){ 
       15:  117:		    state->supplyCount[i] = 8; 
       15:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
       15:  120:		}
        -:  121:	      else
        -:  122:		{
       65:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       80:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     1160:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
     1160:  131:	}
        -:  132:
      160:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       48:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       16:  141:      state->deckCount[i] = 0;
      128:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       48:  144:	  state->deck[i][j] = estate;
       48:  145:	  state->deckCount[i]++;
       48:  146:	}
      256:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
      112:  149:	  state->deck[i][j] = copper;
      112:  150:	  state->deckCount[i]++;		
      112:  151:	}
       16:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       48:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       16:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
       16:  161:    }
        -:  162:
        -:  163:  //draw player hands
       48:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       16:  167:      state->handCount[i] = 0;
       16:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
      192:  170:      for (j = 0; j < 5; j++)
        -:  171:      {
       80:  172:      	  drawCard(i, state);
       80:  173:      }
       16:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      448:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      216:  179:      state->embargoTokens[i] = 0;
      216:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        8:  183:  state->outpostPlayed = 0;
        8:  184:  state->phase = 0;
        8:  185:  state->numActions = 1;
        8:  186:  state->numBuys = 1;
        8:  187:  state->playedCardCount = 0;
        8:  188:  state->whoseTurn = 0;
        8:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        -:  193:  //for (it = 0; it < 5; it++){
        -:  194:  //  drawCard(state->whoseTurn, state);
        -:  195:  //}
        -:  196:
        8:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        8:  199:  return 0;
        8:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       63:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       63:  210:  if (state->deckCount[player] < 1)
        1:  211:    return -1;
       62:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    16718:  215:  while (state->deckCount[player] > 0) {
     8297:  216:    card = floor(Random() * state->deckCount[player]);
     8297:  217:    newDeck[newDeckPos] = state->deck[player][card];
     8297:  218:    newDeckPos++;
  1358366:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   670886:  220:      state->deck[player][i] = state->deck[player][i+1];
   670886:  221:    }
     8297:  222:    state->deckCount[player]--;
        -:  223:  }
    16718:  224:  for (i = 0; i < newDeckPos; i++) {
     8297:  225:    state->deck[player][i] = newDeck[i];
     8297:  226:    state->deckCount[player]++;
     8297:  227:  }
        -:  228:
       62:  229:  return 0;
       63:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       28:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       28:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       28:  244:  if ( state->numActions < 1 )
        -:  245:    {
       23:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        5:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       10:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        5:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        5:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        5:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        5:  270:  return 0;
       28:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       26:  281:  who = state->whoseTurn;
        -:  282:
       26:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       26:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       26:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       26:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       26:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       26:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       26:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       26:  309:  return 0;
       26:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      197:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      428:  317:  int currentPlayer = whoseTurn(state);
      428:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       52:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
        3:  327:  int count = 0;
        -:  328:
       42:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
       31:  331:      if (state->deck[player][i] == card) count++;
       18:  332:    }
        -:  333:
        6:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
       16:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
       10:  341:      if (state->discard[player][i] == card) count++;
        5:  342:    }
        -:  343:
        3:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     6684:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       27:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      334:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      140:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      140:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      140:  360:  }
       27:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       27:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       14:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       14:  366:  }
        -:  367:  else{
       13:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       27:  371:  state->outpostPlayed = 0;
       27:  372:  state->phase = 0;
       27:  373:  state->numActions = 1;
       27:  374:  state->coins = 0;
       27:  375:  state->numBuys = 1;
       27:  376:  state->playedCardCount = 0;
       27:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      324:  381:  for (k = 0; k < 5; k++){
      135:  382:    drawCard(state->whoseTurn, state);//Draw a card
      135:  383:  }
        -:  384:
        -:  385:  //Update money
       27:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       27:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       31:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        2:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       29:  402:  j = 0;
     1508:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      725:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
        3:  407:	  j++;
        3:  408:	}
      725:  409:    }
       29:  410:  if ( j >= 3)
        -:  411:    {
        1:  412:      return 1;
        -:  413:    }
        -:  414:
       28:  415:  return 0;
       31:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       46:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       21:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       23:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       24:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  442:    }
        -:  443:
        -:  444:  //score from deck
       46:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       21:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       23:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       26:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1025529:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    16366:  534:    for (i = 0; i < state->discardCount[player];i++){
     8137:  535:      state->deck[player][i] = state->discard[player][i];
     8137:  536:      state->discard[player][i] = -1;
     8137:  537:    }
        -:  538:
       46:  539:    state->deckCount[player] = state->discardCount[player];
       46:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       46:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       46:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       46:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       46:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       46:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       46:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  564:    state->deckCount[player]--;
       46:  565:    state->handCount[player]++;//Increment hand count
       46:  566:  }
        -:  567:
        -:  568:  else{
  1025483:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1025483:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1025483:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1025483:  577:    state->deckCount[player]--;
  1025483:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1025529:  581:  return 0;
  1025529:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       79:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        1:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
        1:  593:      return 5;
        -:  594:    case province:
       17:  595:      return 8;
        -:  596:    case copper:
        1:  597:      return 0;
        -:  598:    case silver:
       15:  599:      return 3;
        -:  600:    case gold:
       19:  601:      return 6;
        -:  602:    case adventurer:
        5:  603:      return 6;
        -:  604:    case council_room:
        1:  605:      return 5;
        -:  606:    case feast:
        1:  607:      return 4;
        -:  608:    case gardens:
        1:  609:      return 4;
        -:  610:    case mine:
        1:  611:      return 5;
        -:  612:    case remodel:
        1:  613:      return 4;
        -:  614:    case smithy:
        1:  615:      return 4;
        -:  616:    case village:
        1:  617:      return 3;
        -:  618:    case baron:
        1:  619:      return 4;
        -:  620:    case great_hall:
        1:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
        1:  625:      return 3;
        -:  626:    case tribute:
        1:  627:      return 5;
        -:  628:    case ambassador:
        1:  629:      return 3;
        -:  630:    case cutpurse:
        1:  631:      return 4;
        -:  632:    case embargo: 
        1:  633:      return 2;
        -:  634:    case outpost:
        1:  635:      return 5;
        -:  636:    case salvager:
        1:  637:      return 4;
        -:  638:    case sea_hag:
        1:  639:      return 4;
        -:  640:    case treasure_map:
        1:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       79:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
     6005:  654:  int currentPlayer = whoseTurn(state);
     6005:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
     6005:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        -:  660:  
     6005:  661:  if (nextPlayer > (state->numPlayers - 1)){
     2983:  662:    nextPlayer = 0;
     2983:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6005:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
     2005:  670:      return adventurer_effect(state, currentPlayer);
        -:  671:
        -:  672:    case council_room:
    #####:  673:      return council_room_effect(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
     2000:  793:      return smithy_effect(currentPlayer, state, handPos);
        -:  794:		
        -:  795:    case village:
     2000:  796:      return village_effect(currentPlayer, state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baron_effect(currentPlayer, state, handPos, choice1);
        -:  800:		
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
     6005: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
     8000: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
     8000: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8000: 1131:      state->playedCardCount++;
     8000: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
     8000: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
     8000: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
        4: 1141:      state->handCount[currentPlayer]--;
        4: 1142:    }
     7996: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
     7996: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
     7996: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
     7996: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
     8000: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
       26: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
       26: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
       26: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       26: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
       26: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
       26: 1195:  return 0;
       26: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
       44: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
      428: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
      170: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
       54: 1210:	  state->coins += 1;
       54: 1211:	}
      116: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
       44: 1214:	  state->coins += 2;
       44: 1215:	}
       72: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
       19: 1218:	  state->coins += 3;
       19: 1219:	}	
      170: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
       44: 1223:  state->coins += bonus;
        -: 1224:
       44: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int smithy_effect(int currentPlayer, struct gameState *state, int handPos){ //draw 3 cards
        -: 1229:    int i;
    16000: 1230:    for (i = 0; i < 3; i++)
        -: 1231:    {
     6000: 1232:      drawCard(currentPlayer, state);
     6000: 1233:    }
        -: 1234:        
        -: 1235:    //discard card from hand
     2000: 1236:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1237:    return -1;
        -: 1238:}
        -: 1239:
        -: 1240:int adventurer_effect(struct gameState *state, int currentPlayer){
        -: 1241:    int cardDrawn;
        -: 1242:    int temphand[MAX_HAND];
     2005: 1243:    int z = 0;
     2005: 1244:    int drawntreasure=0;
        -: 1245:    //printf("Inside Adventurer \n");
  1013340: 1246:    while(drawntreasure<2){
   504665: 1247:        if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
        1: 1248:            shuffle(currentPlayer, state);
        1: 1249:        }
   504665: 1250:        drawCard(currentPlayer, state);
   504665: 1251:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1509983: 1252:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4010: 1253:            drawntreasure++;
        -: 1254:        else{
   500655: 1255:            temphand[z]=cardDrawn;
   500655: 1256:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   500655: 1257:            z++;
        -: 1258:        }
        -: 1259:    }
  1005320: 1260:    while(z-1>=0){
   500655: 1261:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   500655: 1262:        z=z-1;
        -: 1263:    }
     2005: 1264:    return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int village_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1268://+1 Card
     2000: 1269:    drawCard(currentPlayer, state);
        -: 1270:        
        -: 1271:    //+2 Actions 
     2000: 1272:    state->numActions = state->numActions + 2;
        -: 1273:        
        -: 1274:    //discard played card from hand
     2000: 1275:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int baron_effect(int currentPlayer, struct gameState *state, int handPos, int choice1){
    #####: 1280:    state->numBuys++;//Increase buys by 1!
    #####: 1281:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1282:	int p = 0;//Iterator for hand!
    #####: 1283:	int card_not_discarded = 0;//Flag for discard set!
    #####: 1284:	while(card_not_discarded){
    #####: 1285:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1286:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1287:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1288:	    state->discardCount[currentPlayer]++;
    #####: 1289:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1290:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1291:	    }
    #####: 1292:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1293:	    state->handCount[currentPlayer]--;
    #####: 1294:	    card_not_discarded = 0;//Exit the loop
    #####: 1295:	  }
    #####: 1296:	  else if (p > state->handCount[currentPlayer]){
        -: 1297:	    if(DEBUG) {
        -: 1298:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1299:	      printf("Must gain an estate if there are any\n");
        -: 1300:	    }
    #####: 1301:	    if (supplyCount(estate, state) > 0){
    #####: 1302:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1303:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1304:	      if (supplyCount(estate, state) == 0){
    #####: 1305:		isGameOver(state);
    #####: 1306:	      }
    #####: 1307:	    }
    #####: 1308:	    card_not_discarded = 0;//Exit the loop
    #####: 1309:	  }
        -: 1310:			    
        -: 1311:	  else{
    #####: 1312:	    p++;//Next card
        -: 1313:	  }
        -: 1314:	}
    #####: 1315:      }
        -: 1316:			    
        -: 1317:      else{
    #####: 1318:	if (supplyCount(estate, state) > 0){
    #####: 1319:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1320:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1321:	  if (supplyCount(estate, state) == 0){
    #####: 1322:	    isGameOver(state);
    #####: 1323:	  }
    #####: 1324:	}
        -: 1325:      }
    #####: 1326:    return 0;
        -: 1327:}
        -: 1328:
        -: 1329:int council_room_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1330:    int i;
        -: 1331:    
        -: 1332:    //+4 Cards
    #####: 1333:      for (i = 0; i < 4; i++)
        -: 1334:	{
    #####: 1335:	  drawCard(currentPlayer, state);
    #####: 1336:	}
        -: 1337:			
        -: 1338:      //+1 Buy
    #####: 1339:      state->numBuys++;
        -: 1340:			
        -: 1341:      //Each other player draws a card
    #####: 1342:      for (i = 0; i < state->numPlayers; i++)
        -: 1343:	{
    #####: 1344:	  if ( i != currentPlayer )
        -: 1345:	    {
    #####: 1346:	      drawCard(i, state);
    #####: 1347:	    }
    #####: 1348:	}
        -: 1349:			
        -: 1350:      //put played card in played card pile
    #####: 1351:      discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:      return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of cards.c
        -: 1358://end of dominion.c
        -: 1359:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
    65456:   10:  if (*(int*)a > *(int*)b)
    34053:   11:    return 1;
    31403:   12:  if (*(int*)a < *(int*)b)
    31159:   13:    return -1;
      244:   14:  return 0;
    65456:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  //int it;			
        -:   44:  //set up random number generator
        9:   45:  SelectStream(1);
        9:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       18:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        9:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      198:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     1980:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     1710:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
      900:   66:        }
       90:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        9:   74:  if (numPlayers == 2)
        -:   75:    {
        9:   76:      state->supplyCount[curse] = 10;
        9:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        9:   88:  if (numPlayers == 2)
        -:   89:    {
        9:   90:      state->supplyCount[estate] = 8;
        9:   91:      state->supplyCount[duchy] = 8;
        9:   92:      state->supplyCount[province] = 8;
        9:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        9:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  103:  state->supplyCount[silver] = 40;
        9:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      378:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     2970:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
     1395:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      172:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       17:  116:		  if (numPlayers == 2){ 
       17:  117:		    state->supplyCount[i] = 8; 
       17:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
       17:  120:		}
        -:  121:	      else
        -:  122:		{
       73:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       90:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     1305:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
     1305:  131:	}
        -:  132:
      180:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       54:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       18:  141:      state->deckCount[i] = 0;
      144:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       54:  144:	  state->deck[i][j] = estate;
       54:  145:	  state->deckCount[i]++;
       54:  146:	}
      288:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
      126:  149:	  state->deck[i][j] = copper;
      126:  150:	  state->deckCount[i]++;		
      126:  151:	}
       18:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       54:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       18:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
       18:  161:    }
        -:  162:
        -:  163:  //draw player hands
       54:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       18:  167:      state->handCount[i] = 0;
       18:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
      216:  170:      for (j = 0; j < 5; j++)
        -:  171:      {
       90:  172:      	  drawCard(i, state);
       90:  173:      }
       18:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      504:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      243:  179:      state->embargoTokens[i] = 0;
      243:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        9:  183:  state->outpostPlayed = 0;
        9:  184:  state->phase = 0;
        9:  185:  state->numActions = 1;
        9:  186:  state->numBuys = 1;
        9:  187:  state->playedCardCount = 0;
        9:  188:  state->whoseTurn = 0;
        9:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        -:  193:  //for (it = 0; it < 5; it++){
        -:  194:  //  drawCard(state->whoseTurn, state);
        -:  195:  //}
        -:  196:
        9:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        9:  199:  return 0;
        9:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       65:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       65:  210:  if (state->deckCount[player] < 1)
        1:  211:    return -1;
       64:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    16762:  215:  while (state->deckCount[player] > 0) {
     8317:  216:    card = floor(Random() * state->deckCount[player]);
     8317:  217:    newDeck[newDeckPos] = state->deck[player][card];
     8317:  218:    newDeckPos++;
  1358506:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   670936:  220:      state->deck[player][i] = state->deck[player][i+1];
   670936:  221:    }
     8317:  222:    state->deckCount[player]--;
        -:  223:  }
    16762:  224:  for (i = 0; i < newDeckPos; i++) {
     8317:  225:    state->deck[player][i] = newDeck[i];
     8317:  226:    state->deckCount[player]++;
     8317:  227:  }
        -:  228:
       64:  229:  return 0;
       65:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       28:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       28:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       28:  244:  if ( state->numActions < 1 )
        -:  245:    {
       23:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        5:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       10:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        5:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        5:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        5:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        5:  270:  return 0;
       28:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       26:  281:  who = state->whoseTurn;
        -:  282:
       26:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       26:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       26:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       26:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       26:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       26:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       26:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       26:  309:  return 0;
       26:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      197:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      428:  317:  int currentPlayer = whoseTurn(state);
      428:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       52:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
        3:  327:  int count = 0;
        -:  328:
       42:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
       31:  331:      if (state->deck[player][i] == card) count++;
       18:  332:    }
        -:  333:
        6:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
       16:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
       10:  341:      if (state->discard[player][i] == card) count++;
        5:  342:    }
        -:  343:
        3:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     6685:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       27:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      334:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      140:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      140:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      140:  360:  }
       27:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       27:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       14:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       14:  366:  }
        -:  367:  else{
       13:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       27:  371:  state->outpostPlayed = 0;
       27:  372:  state->phase = 0;
       27:  373:  state->numActions = 1;
       27:  374:  state->coins = 0;
       27:  375:  state->numBuys = 1;
       27:  376:  state->playedCardCount = 0;
       27:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      324:  381:  for (k = 0; k < 5; k++){
      135:  382:    drawCard(state->whoseTurn, state);//Draw a card
      135:  383:  }
        -:  384:
        -:  385:  //Update money
       27:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       27:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       31:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        2:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       29:  402:  j = 0;
     1508:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      725:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
        3:  407:	  j++;
        3:  408:	}
      725:  409:    }
       29:  410:  if ( j >= 3)
        -:  411:    {
        1:  412:      return 1;
        -:  413:    }
        -:  414:
       28:  415:  return 0;
       31:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       46:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       21:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       23:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       24:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  442:    }
        -:  443:
        -:  444:  //score from deck
       46:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       21:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       23:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       26:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1025542:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    16366:  534:    for (i = 0; i < state->discardCount[player];i++){
     8137:  535:      state->deck[player][i] = state->discard[player][i];
     8137:  536:      state->discard[player][i] = -1;
     8137:  537:    }
        -:  538:
       46:  539:    state->deckCount[player] = state->discardCount[player];
       46:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       46:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       46:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       46:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       46:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       46:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       46:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  564:    state->deckCount[player]--;
       46:  565:    state->handCount[player]++;//Increment hand count
       46:  566:  }
        -:  567:
        -:  568:  else{
  1025496:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1025496:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1025496:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1025496:  577:    state->deckCount[player]--;
  1025496:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1025542:  581:  return 0;
  1025542:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       79:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        1:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
        1:  593:      return 5;
        -:  594:    case province:
       17:  595:      return 8;
        -:  596:    case copper:
        1:  597:      return 0;
        -:  598:    case silver:
       15:  599:      return 3;
        -:  600:    case gold:
       19:  601:      return 6;
        -:  602:    case adventurer:
        5:  603:      return 6;
        -:  604:    case council_room:
        1:  605:      return 5;
        -:  606:    case feast:
        1:  607:      return 4;
        -:  608:    case gardens:
        1:  609:      return 4;
        -:  610:    case mine:
        1:  611:      return 5;
        -:  612:    case remodel:
        1:  613:      return 4;
        -:  614:    case smithy:
        1:  615:      return 4;
        -:  616:    case village:
        1:  617:      return 3;
        -:  618:    case baron:
        1:  619:      return 4;
        -:  620:    case great_hall:
        1:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
        1:  625:      return 3;
        -:  626:    case tribute:
        1:  627:      return 5;
        -:  628:    case ambassador:
        1:  629:      return 3;
        -:  630:    case cutpurse:
        1:  631:      return 4;
        -:  632:    case embargo: 
        1:  633:      return 2;
        -:  634:    case outpost:
        1:  635:      return 5;
        -:  636:    case salvager:
        1:  637:      return 4;
        -:  638:    case sea_hag:
        1:  639:      return 4;
        -:  640:    case treasure_map:
        1:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       79:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
     6006:  654:  int currentPlayer = whoseTurn(state);
     6006:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
     6006:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        -:  660:  
     6006:  661:  if (nextPlayer > (state->numPlayers - 1)){
     2983:  662:    nextPlayer = 0;
     2983:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6006:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
     2005:  670:      return adventurer_effect(state, currentPlayer);
        -:  671:
        -:  672:    case council_room:
    #####:  673:      return council_room_effect(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
     2001:  793:      return smithy_effect(currentPlayer, state, handPos);
        -:  794:		
        -:  795:    case village:
     2000:  796:      return village_effect(currentPlayer, state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baron_effect(currentPlayer, state, handPos, choice1);
        -:  800:		
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
     6006: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
     8001: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
     8001: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8001: 1131:      state->playedCardCount++;
     8001: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
     8001: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
     8001: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
        4: 1141:      state->handCount[currentPlayer]--;
        4: 1142:    }
     7997: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
     7997: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
     7997: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
     7997: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
     8001: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
       26: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
       26: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
       26: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       26: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
       26: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
       26: 1195:  return 0;
       26: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
       45: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
      430: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
      170: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
       54: 1210:	  state->coins += 1;
       54: 1211:	}
      116: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
       44: 1214:	  state->coins += 2;
       44: 1215:	}
       72: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
       19: 1218:	  state->coins += 3;
       19: 1219:	}	
      170: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
       45: 1223:  state->coins += bonus;
        -: 1224:
       45: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int smithy_effect(int currentPlayer, struct gameState *state, int handPos){ //draw 3 cards
        -: 1229:    int i;
    16008: 1230:    for (i = 0; i < 3; i++)
        -: 1231:    {
     6003: 1232:      drawCard(currentPlayer, state);
     6003: 1233:    }
        -: 1234:        
        -: 1235:    //discard card from hand
     2001: 1236:    discardCard(handPos, currentPlayer, state, 0);
     2001: 1237:    return -1;
        -: 1238:}
        -: 1239:
        -: 1240:int adventurer_effect(struct gameState *state, int currentPlayer){
        -: 1241:    int cardDrawn;
        -: 1242:    int temphand[MAX_HAND];
     2005: 1243:    int z = 0;
     2005: 1244:    int drawntreasure=0;
        -: 1245:    //printf("Inside Adventurer \n");
  1013340: 1246:    while(drawntreasure<2){
   504665: 1247:        if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
        1: 1248:            shuffle(currentPlayer, state);
        1: 1249:        }
   504665: 1250:        drawCard(currentPlayer, state);
   504665: 1251:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1509983: 1252:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4010: 1253:            drawntreasure++;
        -: 1254:        else{
   500655: 1255:            temphand[z]=cardDrawn;
   500655: 1256:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   500655: 1257:            z++;
        -: 1258:        }
        -: 1259:    }
  1005320: 1260:    while(z-1>=0){
   500655: 1261:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   500655: 1262:        z=z-1;
        -: 1263:    }
     2005: 1264:    return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int village_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1268://+1 Card
     2000: 1269:    drawCard(currentPlayer, state);
        -: 1270:        
        -: 1271:    //+2 Actions 
     2000: 1272:    state->numActions = state->numActions + 2;
        -: 1273:        
        -: 1274:    //discard played card from hand
     2000: 1275:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int baron_effect(int currentPlayer, struct gameState *state, int handPos, int choice1){
    #####: 1280:    state->numBuys++;//Increase buys by 1!
    #####: 1281:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1282:	int p = 0;//Iterator for hand!
    #####: 1283:	int card_not_discarded = 0;//Flag for discard set!
    #####: 1284:	while(card_not_discarded){
    #####: 1285:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1286:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1287:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1288:	    state->discardCount[currentPlayer]++;
    #####: 1289:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1290:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1291:	    }
    #####: 1292:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1293:	    state->handCount[currentPlayer]--;
    #####: 1294:	    card_not_discarded = 0;//Exit the loop
    #####: 1295:	  }
    #####: 1296:	  else if (p > state->handCount[currentPlayer]){
        -: 1297:	    if(DEBUG) {
        -: 1298:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1299:	      printf("Must gain an estate if there are any\n");
        -: 1300:	    }
    #####: 1301:	    if (supplyCount(estate, state) > 0){
    #####: 1302:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1303:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1304:	      if (supplyCount(estate, state) == 0){
    #####: 1305:		isGameOver(state);
    #####: 1306:	      }
    #####: 1307:	    }
    #####: 1308:	    card_not_discarded = 0;//Exit the loop
    #####: 1309:	  }
        -: 1310:			    
        -: 1311:	  else{
    #####: 1312:	    p++;//Next card
        -: 1313:	  }
        -: 1314:	}
    #####: 1315:      }
        -: 1316:			    
        -: 1317:      else{
    #####: 1318:	if (supplyCount(estate, state) > 0){
    #####: 1319:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1320:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1321:	  if (supplyCount(estate, state) == 0){
    #####: 1322:	    isGameOver(state);
    #####: 1323:	  }
    #####: 1324:	}
        -: 1325:      }
    #####: 1326:    return 0;
        -: 1327:}
        -: 1328:
        -: 1329:int council_room_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1330:    int i;
        -: 1331:    
        -: 1332:    //+4 Cards
    #####: 1333:      for (i = 0; i < 4; i++)
        -: 1334:	{
    #####: 1335:	  drawCard(currentPlayer, state);
    #####: 1336:	}
        -: 1337:			
        -: 1338:      //+1 Buy
    #####: 1339:      state->numBuys++;
        -: 1340:			
        -: 1341:      //Each other player draws a card
    #####: 1342:      for (i = 0; i < state->numPlayers; i++)
        -: 1343:	{
    #####: 1344:	  if ( i != currentPlayer )
        -: 1345:	    {
    #####: 1346:	      drawCard(i, state);
    #####: 1347:	    }
    #####: 1348:	}
        -: 1349:			
        -: 1350:      //put played card in played card pile
    #####: 1351:      discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:      return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of cards.c
        -: 1358://end of dominion.c
        -: 1359:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
    65484:   10:  if (*(int*)a > *(int*)b)
    34053:   11:    return 1;
    31431:   12:  if (*(int*)a < *(int*)b)
    31169:   13:    return -1;
      262:   14:  return 0;
    65484:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  //int it;			
        -:   44:  //set up random number generator
       10:   45:  SelectStream(1);
       10:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       20:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       10:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      220:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     2200:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     1900:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
     1000:   66:        }
      100:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       10:   74:  if (numPlayers == 2)
        -:   75:    {
       10:   76:      state->supplyCount[curse] = 10;
       10:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       10:   88:  if (numPlayers == 2)
        -:   89:    {
       10:   90:      state->supplyCount[estate] = 8;
       10:   91:      state->supplyCount[duchy] = 8;
       10:   92:      state->supplyCount[province] = 8;
       10:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       10:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  103:  state->supplyCount[silver] = 40;
       10:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      420:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     3300:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
     1550:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      191:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       19:  116:		  if (numPlayers == 2){ 
       19:  117:		    state->supplyCount[i] = 8; 
       19:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
       19:  120:		}
        -:  121:	      else
        -:  122:		{
       81:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      100:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     1450:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
     1450:  131:	}
        -:  132:
      200:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       60:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       20:  141:      state->deckCount[i] = 0;
      160:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       60:  144:	  state->deck[i][j] = estate;
       60:  145:	  state->deckCount[i]++;
       60:  146:	}
      320:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
      140:  149:	  state->deck[i][j] = copper;
      140:  150:	  state->deckCount[i]++;		
      140:  151:	}
       20:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       60:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       20:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
       20:  161:    }
        -:  162:
        -:  163:  //draw player hands
       60:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       20:  167:      state->handCount[i] = 0;
       20:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
      240:  170:      for (j = 0; j < 5; j++)
        -:  171:      {
      100:  172:      	  drawCard(i, state);
      100:  173:      }
       20:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      560:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      270:  179:      state->embargoTokens[i] = 0;
      270:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       10:  183:  state->outpostPlayed = 0;
       10:  184:  state->phase = 0;
       10:  185:  state->numActions = 1;
       10:  186:  state->numBuys = 1;
       10:  187:  state->playedCardCount = 0;
       10:  188:  state->whoseTurn = 0;
       10:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        -:  193:  //for (it = 0; it < 5; it++){
        -:  194:  //  drawCard(state->whoseTurn, state);
        -:  195:  //}
        -:  196:
       10:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
       10:  199:  return 0;
       10:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       67:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       67:  210:  if (state->deckCount[player] < 1)
        1:  211:    return -1;
       66:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    16806:  215:  while (state->deckCount[player] > 0) {
     8337:  216:    card = floor(Random() * state->deckCount[player]);
     8337:  217:    newDeck[newDeckPos] = state->deck[player][card];
     8337:  218:    newDeckPos++;
  1358646:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   670986:  220:      state->deck[player][i] = state->deck[player][i+1];
   670986:  221:    }
     8337:  222:    state->deckCount[player]--;
        -:  223:  }
    16806:  224:  for (i = 0; i < newDeckPos; i++) {
     8337:  225:    state->deck[player][i] = newDeck[i];
     8337:  226:    state->deckCount[player]++;
     8337:  227:  }
        -:  228:
       66:  229:  return 0;
       67:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       28:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       28:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       28:  244:  if ( state->numActions < 1 )
        -:  245:    {
       23:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        5:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       10:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        5:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        5:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        5:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        5:  270:  return 0;
       28:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       26:  281:  who = state->whoseTurn;
        -:  282:
       26:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       26:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       26:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       26:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       26:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       26:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       26:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       26:  309:  return 0;
       26:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      197:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      428:  317:  int currentPlayer = whoseTurn(state);
      428:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       52:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
        3:  327:  int count = 0;
        -:  328:
       42:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
       31:  331:      if (state->deck[player][i] == card) count++;
       18:  332:    }
        -:  333:
        6:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
       16:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
       10:  341:      if (state->discard[player][i] == card) count++;
        5:  342:    }
        -:  343:
        3:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     6686:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       27:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      334:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      140:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      140:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      140:  360:  }
       27:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       27:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       14:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       14:  366:  }
        -:  367:  else{
       13:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       27:  371:  state->outpostPlayed = 0;
       27:  372:  state->phase = 0;
       27:  373:  state->numActions = 1;
       27:  374:  state->coins = 0;
       27:  375:  state->numBuys = 1;
       27:  376:  state->playedCardCount = 0;
       27:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      324:  381:  for (k = 0; k < 5; k++){
      135:  382:    drawCard(state->whoseTurn, state);//Draw a card
      135:  383:  }
        -:  384:
        -:  385:  //Update money
       27:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       27:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       31:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        2:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       29:  402:  j = 0;
     1508:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      725:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
        3:  407:	  j++;
        3:  408:	}
      725:  409:    }
       29:  410:  if ( j >= 3)
        -:  411:    {
        1:  412:      return 1;
        -:  413:    }
        -:  414:
       28:  415:  return 0;
       31:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       46:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       21:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       23:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       24:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  442:    }
        -:  443:
        -:  444:  //score from deck
       46:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       21:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       23:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       26:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1025554:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    16366:  534:    for (i = 0; i < state->discardCount[player];i++){
     8137:  535:      state->deck[player][i] = state->discard[player][i];
     8137:  536:      state->discard[player][i] = -1;
     8137:  537:    }
        -:  538:
       46:  539:    state->deckCount[player] = state->discardCount[player];
       46:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       46:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       46:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       46:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       46:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       46:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       46:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  564:    state->deckCount[player]--;
       46:  565:    state->handCount[player]++;//Increment hand count
       46:  566:  }
        -:  567:
        -:  568:  else{
  1025508:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1025508:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1025508:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1025508:  577:    state->deckCount[player]--;
  1025508:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1025554:  581:  return 0;
  1025554:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       79:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        1:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
        1:  593:      return 5;
        -:  594:    case province:
       17:  595:      return 8;
        -:  596:    case copper:
        1:  597:      return 0;
        -:  598:    case silver:
       15:  599:      return 3;
        -:  600:    case gold:
       19:  601:      return 6;
        -:  602:    case adventurer:
        5:  603:      return 6;
        -:  604:    case council_room:
        1:  605:      return 5;
        -:  606:    case feast:
        1:  607:      return 4;
        -:  608:    case gardens:
        1:  609:      return 4;
        -:  610:    case mine:
        1:  611:      return 5;
        -:  612:    case remodel:
        1:  613:      return 4;
        -:  614:    case smithy:
        1:  615:      return 4;
        -:  616:    case village:
        1:  617:      return 3;
        -:  618:    case baron:
        1:  619:      return 4;
        -:  620:    case great_hall:
        1:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
        1:  625:      return 3;
        -:  626:    case tribute:
        1:  627:      return 5;
        -:  628:    case ambassador:
        1:  629:      return 3;
        -:  630:    case cutpurse:
        1:  631:      return 4;
        -:  632:    case embargo: 
        1:  633:      return 2;
        -:  634:    case outpost:
        1:  635:      return 5;
        -:  636:    case salvager:
        1:  637:      return 4;
        -:  638:    case sea_hag:
        1:  639:      return 4;
        -:  640:    case treasure_map:
        1:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       79:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
     6007:  654:  int currentPlayer = whoseTurn(state);
     6007:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
     6007:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        -:  660:  
     6007:  661:  if (nextPlayer > (state->numPlayers - 1)){
     2983:  662:    nextPlayer = 0;
     2983:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6007:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
     2006:  670:      return adventurer_effect(state, currentPlayer);
        -:  671:
        -:  672:    case council_room:
    #####:  673:      return council_room_effect(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
     2001:  793:      return smithy_effect(currentPlayer, state, handPos);
        -:  794:		
        -:  795:    case village:
     2000:  796:      return village_effect(currentPlayer, state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baron_effect(currentPlayer, state, handPos, choice1);
        -:  800:		
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
     6007: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
     8001: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
     8001: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8001: 1131:      state->playedCardCount++;
     8001: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
     8001: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
     8001: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
        4: 1141:      state->handCount[currentPlayer]--;
        4: 1142:    }
     7997: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
     7997: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
     7997: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
     7997: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
     8001: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
       26: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
       26: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
       26: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       26: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
       26: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
       26: 1195:  return 0;
       26: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
       46: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
      432: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
      170: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
       54: 1210:	  state->coins += 1;
       54: 1211:	}
      116: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
       44: 1214:	  state->coins += 2;
       44: 1215:	}
       72: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
       19: 1218:	  state->coins += 3;
       19: 1219:	}	
      170: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
       46: 1223:  state->coins += bonus;
        -: 1224:
       46: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int smithy_effect(int currentPlayer, struct gameState *state, int handPos){ //draw 3 cards
        -: 1229:    int i;
    16008: 1230:    for (i = 0; i < 3; i++)
        -: 1231:    {
     6003: 1232:      drawCard(currentPlayer, state);
     6003: 1233:    }
        -: 1234:        
        -: 1235:    //discard card from hand
     2001: 1236:    discardCard(handPos, currentPlayer, state, 0);
     2001: 1237:    return -1;
        -: 1238:}
        -: 1239:
        -: 1240:int adventurer_effect(struct gameState *state, int currentPlayer){
        -: 1241:    int cardDrawn;
        -: 1242:    int temphand[MAX_HAND];
     2006: 1243:    int z = 0;
     2006: 1244:    int drawntreasure=0;
        -: 1245:    //printf("Inside Adventurer \n");
  1013346: 1246:    while(drawntreasure<2){
   504667: 1247:        if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
        1: 1248:            shuffle(currentPlayer, state);
        1: 1249:        }
   504667: 1250:        drawCard(currentPlayer, state);
   504667: 1251:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1509985: 1252:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4012: 1253:            drawntreasure++;
        -: 1254:        else{
   500655: 1255:            temphand[z]=cardDrawn;
   500655: 1256:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   500655: 1257:            z++;
        -: 1258:        }
        -: 1259:    }
  1005322: 1260:    while(z-1>=0){
   500655: 1261:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   500655: 1262:        z=z-1;
        -: 1263:    }
     2006: 1264:    return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int village_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1268://+1 Card
     2000: 1269:    drawCard(currentPlayer, state);
        -: 1270:        
        -: 1271:    //+2 Actions 
     2000: 1272:    state->numActions = state->numActions + 2;
        -: 1273:        
        -: 1274:    //discard played card from hand
     2000: 1275:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int baron_effect(int currentPlayer, struct gameState *state, int handPos, int choice1){
    #####: 1280:    state->numBuys++;//Increase buys by 1!
    #####: 1281:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1282:	int p = 0;//Iterator for hand!
    #####: 1283:	int card_not_discarded = 0;//Flag for discard set!
    #####: 1284:	while(card_not_discarded){
    #####: 1285:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1286:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1287:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1288:	    state->discardCount[currentPlayer]++;
    #####: 1289:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1290:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1291:	    }
    #####: 1292:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1293:	    state->handCount[currentPlayer]--;
    #####: 1294:	    card_not_discarded = 0;//Exit the loop
    #####: 1295:	  }
    #####: 1296:	  else if (p > state->handCount[currentPlayer]){
        -: 1297:	    if(DEBUG) {
        -: 1298:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1299:	      printf("Must gain an estate if there are any\n");
        -: 1300:	    }
    #####: 1301:	    if (supplyCount(estate, state) > 0){
    #####: 1302:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1303:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1304:	      if (supplyCount(estate, state) == 0){
    #####: 1305:		isGameOver(state);
    #####: 1306:	      }
    #####: 1307:	    }
    #####: 1308:	    card_not_discarded = 0;//Exit the loop
    #####: 1309:	  }
        -: 1310:			    
        -: 1311:	  else{
    #####: 1312:	    p++;//Next card
        -: 1313:	  }
        -: 1314:	}
    #####: 1315:      }
        -: 1316:			    
        -: 1317:      else{
    #####: 1318:	if (supplyCount(estate, state) > 0){
    #####: 1319:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1320:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1321:	  if (supplyCount(estate, state) == 0){
    #####: 1322:	    isGameOver(state);
    #####: 1323:	  }
    #####: 1324:	}
        -: 1325:      }
    #####: 1326:    return 0;
        -: 1327:}
        -: 1328:
        -: 1329:int council_room_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1330:    int i;
        -: 1331:    
        -: 1332:    //+4 Cards
    #####: 1333:      for (i = 0; i < 4; i++)
        -: 1334:	{
    #####: 1335:	  drawCard(currentPlayer, state);
    #####: 1336:	}
        -: 1337:			
        -: 1338:      //+1 Buy
    #####: 1339:      state->numBuys++;
        -: 1340:			
        -: 1341:      //Each other player draws a card
    #####: 1342:      for (i = 0; i < state->numPlayers; i++)
        -: 1343:	{
    #####: 1344:	  if ( i != currentPlayer )
        -: 1345:	    {
    #####: 1346:	      drawCard(i, state);
    #####: 1347:	    }
    #####: 1348:	}
        -: 1349:			
        -: 1350:      //put played card in played card pile
    #####: 1351:      discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:      return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of cards.c
        -: 1358://end of dominion.c
        -: 1359:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
    65512:   10:  if (*(int*)a > *(int*)b)
    34053:   11:    return 1;
    31459:   12:  if (*(int*)a < *(int*)b)
    31179:   13:    return -1;
      280:   14:  return 0;
    65512:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  //int it;			
        -:   44:  //set up random number generator
       11:   45:  SelectStream(1);
       11:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       22:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       11:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      242:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     2420:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     2090:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
     1100:   66:        }
      110:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       11:   74:  if (numPlayers == 2)
        -:   75:    {
       11:   76:      state->supplyCount[curse] = 10;
       11:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       11:   88:  if (numPlayers == 2)
        -:   89:    {
       11:   90:      state->supplyCount[estate] = 8;
       11:   91:      state->supplyCount[duchy] = 8;
       11:   92:      state->supplyCount[province] = 8;
       11:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       11:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  103:  state->supplyCount[silver] = 40;
       11:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      462:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     3630:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
     1705:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      210:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       21:  116:		  if (numPlayers == 2){ 
       21:  117:		    state->supplyCount[i] = 8; 
       21:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
       21:  120:		}
        -:  121:	      else
        -:  122:		{
       89:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      110:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     1595:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
     1595:  131:	}
        -:  132:
      220:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       66:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       22:  141:      state->deckCount[i] = 0;
      176:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       66:  144:	  state->deck[i][j] = estate;
       66:  145:	  state->deckCount[i]++;
       66:  146:	}
      352:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
      154:  149:	  state->deck[i][j] = copper;
      154:  150:	  state->deckCount[i]++;		
      154:  151:	}
       22:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       66:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       22:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
       22:  161:    }
        -:  162:
        -:  163:  //draw player hands
       66:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       22:  167:      state->handCount[i] = 0;
       22:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
      264:  170:      for (j = 0; j < 5; j++)
        -:  171:      {
      110:  172:      	  drawCard(i, state);
      110:  173:      }
       22:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      616:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      297:  179:      state->embargoTokens[i] = 0;
      297:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       11:  183:  state->outpostPlayed = 0;
       11:  184:  state->phase = 0;
       11:  185:  state->numActions = 1;
       11:  186:  state->numBuys = 1;
       11:  187:  state->playedCardCount = 0;
       11:  188:  state->whoseTurn = 0;
       11:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        -:  193:  //for (it = 0; it < 5; it++){
        -:  194:  //  drawCard(state->whoseTurn, state);
        -:  195:  //}
        -:  196:
       11:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
       11:  199:  return 0;
       11:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       69:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       69:  210:  if (state->deckCount[player] < 1)
        1:  211:    return -1;
       68:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    16850:  215:  while (state->deckCount[player] > 0) {
     8357:  216:    card = floor(Random() * state->deckCount[player]);
     8357:  217:    newDeck[newDeckPos] = state->deck[player][card];
     8357:  218:    newDeckPos++;
  1358786:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   671036:  220:      state->deck[player][i] = state->deck[player][i+1];
   671036:  221:    }
     8357:  222:    state->deckCount[player]--;
        -:  223:  }
    16850:  224:  for (i = 0; i < newDeckPos; i++) {
     8357:  225:    state->deck[player][i] = newDeck[i];
     8357:  226:    state->deckCount[player]++;
     8357:  227:  }
        -:  228:
       68:  229:  return 0;
       69:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       28:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       28:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       28:  244:  if ( state->numActions < 1 )
        -:  245:    {
       23:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        5:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       10:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        5:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        5:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        5:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        5:  270:  return 0;
       28:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       26:  281:  who = state->whoseTurn;
        -:  282:
       26:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       26:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       26:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       26:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       26:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       26:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       26:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       26:  309:  return 0;
       26:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      197:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      428:  317:  int currentPlayer = whoseTurn(state);
      428:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       52:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
        3:  327:  int count = 0;
        -:  328:
       42:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
       31:  331:      if (state->deck[player][i] == card) count++;
       18:  332:    }
        -:  333:
        6:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
       16:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
       10:  341:      if (state->discard[player][i] == card) count++;
        5:  342:    }
        -:  343:
        3:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     6687:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       27:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      334:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      140:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      140:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      140:  360:  }
       27:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       27:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       14:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       14:  366:  }
        -:  367:  else{
       13:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       27:  371:  state->outpostPlayed = 0;
       27:  372:  state->phase = 0;
       27:  373:  state->numActions = 1;
       27:  374:  state->coins = 0;
       27:  375:  state->numBuys = 1;
       27:  376:  state->playedCardCount = 0;
       27:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      324:  381:  for (k = 0; k < 5; k++){
      135:  382:    drawCard(state->whoseTurn, state);//Draw a card
      135:  383:  }
        -:  384:
        -:  385:  //Update money
       27:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       27:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       31:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        2:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       29:  402:  j = 0;
     1508:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      725:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
        3:  407:	  j++;
        3:  408:	}
      725:  409:    }
       29:  410:  if ( j >= 3)
        -:  411:    {
        1:  412:      return 1;
        -:  413:    }
        -:  414:
       28:  415:  return 0;
       31:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       46:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       21:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       23:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       24:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  442:    }
        -:  443:
        -:  444:  //score from deck
       46:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       21:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       23:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       26:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1025569:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    16366:  534:    for (i = 0; i < state->discardCount[player];i++){
     8137:  535:      state->deck[player][i] = state->discard[player][i];
     8137:  536:      state->discard[player][i] = -1;
     8137:  537:    }
        -:  538:
       46:  539:    state->deckCount[player] = state->discardCount[player];
       46:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       46:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       46:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       46:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       46:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       46:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       46:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  564:    state->deckCount[player]--;
       46:  565:    state->handCount[player]++;//Increment hand count
       46:  566:  }
        -:  567:
        -:  568:  else{
  1025523:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1025523:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1025523:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1025523:  577:    state->deckCount[player]--;
  1025523:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1025569:  581:  return 0;
  1025569:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       79:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        1:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
        1:  593:      return 5;
        -:  594:    case province:
       17:  595:      return 8;
        -:  596:    case copper:
        1:  597:      return 0;
        -:  598:    case silver:
       15:  599:      return 3;
        -:  600:    case gold:
       19:  601:      return 6;
        -:  602:    case adventurer:
        5:  603:      return 6;
        -:  604:    case council_room:
        1:  605:      return 5;
        -:  606:    case feast:
        1:  607:      return 4;
        -:  608:    case gardens:
        1:  609:      return 4;
        -:  610:    case mine:
        1:  611:      return 5;
        -:  612:    case remodel:
        1:  613:      return 4;
        -:  614:    case smithy:
        1:  615:      return 4;
        -:  616:    case village:
        1:  617:      return 3;
        -:  618:    case baron:
        1:  619:      return 4;
        -:  620:    case great_hall:
        1:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
        1:  625:      return 3;
        -:  626:    case tribute:
        1:  627:      return 5;
        -:  628:    case ambassador:
        1:  629:      return 3;
        -:  630:    case cutpurse:
        1:  631:      return 4;
        -:  632:    case embargo: 
        1:  633:      return 2;
        -:  634:    case outpost:
        1:  635:      return 5;
        -:  636:    case salvager:
        1:  637:      return 4;
        -:  638:    case sea_hag:
        1:  639:      return 4;
        -:  640:    case treasure_map:
        1:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       79:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
     6008:  654:  int currentPlayer = whoseTurn(state);
     6008:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
     6008:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        -:  660:  
     6008:  661:  if (nextPlayer > (state->numPlayers - 1)){
     2983:  662:    nextPlayer = 0;
     2983:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6008:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
     2006:  670:      return adventurer_effect(state, currentPlayer);
        -:  671:
        -:  672:    case council_room:
        1:  673:      return council_room_effect(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
     2001:  793:      return smithy_effect(currentPlayer, state, handPos);
        -:  794:		
        -:  795:    case village:
     2000:  796:      return village_effect(currentPlayer, state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baron_effect(currentPlayer, state, handPos, choice1);
        -:  800:		
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
     6008: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
     8002: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
     8002: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8002: 1131:      state->playedCardCount++;
     8002: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
     8002: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
     8002: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
        4: 1141:      state->handCount[currentPlayer]--;
        4: 1142:    }
     7998: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
     7998: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
     7998: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
     7998: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
     8002: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
       26: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
       26: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
       26: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       26: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
       26: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
       26: 1195:  return 0;
       26: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
       47: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
      434: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
      170: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
       54: 1210:	  state->coins += 1;
       54: 1211:	}
      116: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
       44: 1214:	  state->coins += 2;
       44: 1215:	}
       72: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
       19: 1218:	  state->coins += 3;
       19: 1219:	}	
      170: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
       47: 1223:  state->coins += bonus;
        -: 1224:
       47: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int smithy_effect(int currentPlayer, struct gameState *state, int handPos){ //draw 3 cards
        -: 1229:    int i;
    16008: 1230:    for (i = 0; i < 3; i++)
        -: 1231:    {
     6003: 1232:      drawCard(currentPlayer, state);
     6003: 1233:    }
        -: 1234:        
        -: 1235:    //discard card from hand
     2001: 1236:    discardCard(handPos, currentPlayer, state, 0);
     2001: 1237:    return -1;
        -: 1238:}
        -: 1239:
        -: 1240:int adventurer_effect(struct gameState *state, int currentPlayer){
        -: 1241:    int cardDrawn;
        -: 1242:    int temphand[MAX_HAND];
     2006: 1243:    int z = 0;
     2006: 1244:    int drawntreasure=0;
        -: 1245:    //printf("Inside Adventurer \n");
  1013346: 1246:    while(drawntreasure<2){
   504667: 1247:        if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
        1: 1248:            shuffle(currentPlayer, state);
        1: 1249:        }
   504667: 1250:        drawCard(currentPlayer, state);
   504667: 1251:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1509985: 1252:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4012: 1253:            drawntreasure++;
        -: 1254:        else{
   500655: 1255:            temphand[z]=cardDrawn;
   500655: 1256:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   500655: 1257:            z++;
        -: 1258:        }
        -: 1259:    }
  1005322: 1260:    while(z-1>=0){
   500655: 1261:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   500655: 1262:        z=z-1;
        -: 1263:    }
     2006: 1264:    return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int village_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1268://+1 Card
     2000: 1269:    drawCard(currentPlayer, state);
        -: 1270:        
        -: 1271:    //+2 Actions 
     2000: 1272:    state->numActions = state->numActions + 2;
        -: 1273:        
        -: 1274:    //discard played card from hand
     2000: 1275:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int baron_effect(int currentPlayer, struct gameState *state, int handPos, int choice1){
    #####: 1280:    state->numBuys++;//Increase buys by 1!
    #####: 1281:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1282:	int p = 0;//Iterator for hand!
    #####: 1283:	int card_not_discarded = 0;//Flag for discard set!
    #####: 1284:	while(card_not_discarded){
    #####: 1285:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1286:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1287:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1288:	    state->discardCount[currentPlayer]++;
    #####: 1289:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1290:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1291:	    }
    #####: 1292:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1293:	    state->handCount[currentPlayer]--;
    #####: 1294:	    card_not_discarded = 0;//Exit the loop
    #####: 1295:	  }
    #####: 1296:	  else if (p > state->handCount[currentPlayer]){
        -: 1297:	    if(DEBUG) {
        -: 1298:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1299:	      printf("Must gain an estate if there are any\n");
        -: 1300:	    }
    #####: 1301:	    if (supplyCount(estate, state) > 0){
    #####: 1302:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1303:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1304:	      if (supplyCount(estate, state) == 0){
    #####: 1305:		isGameOver(state);
    #####: 1306:	      }
    #####: 1307:	    }
    #####: 1308:	    card_not_discarded = 0;//Exit the loop
    #####: 1309:	  }
        -: 1310:			    
        -: 1311:	  else{
    #####: 1312:	    p++;//Next card
        -: 1313:	  }
        -: 1314:	}
    #####: 1315:      }
        -: 1316:			    
        -: 1317:      else{
    #####: 1318:	if (supplyCount(estate, state) > 0){
    #####: 1319:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1320:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1321:	  if (supplyCount(estate, state) == 0){
    #####: 1322:	    isGameOver(state);
    #####: 1323:	  }
    #####: 1324:	}
        -: 1325:      }
    #####: 1326:    return 0;
        -: 1327:}
        -: 1328:
        -: 1329:int council_room_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1330:    int i;
        -: 1331:    
        -: 1332:    //+4 Cards
       10: 1333:      for (i = 0; i < 4; i++)
        -: 1334:	{
        4: 1335:	  drawCard(currentPlayer, state);
        4: 1336:	}
        -: 1337:			
        -: 1338:      //+1 Buy
        1: 1339:      state->numBuys++;
        -: 1340:			
        -: 1341:      //Each other player draws a card
        6: 1342:      for (i = 0; i < state->numPlayers; i++)
        -: 1343:	{
        2: 1344:	  if ( i != currentPlayer )
        -: 1345:	    {
        1: 1346:	      drawCard(i, state);
        1: 1347:	    }
        2: 1348:	}
        -: 1349:			
        -: 1350:      //put played card in played card pile
        1: 1351:      discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
        1: 1353:      return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of cards.c
        -: 1358://end of dominion.c
        -: 1359:
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:12
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
    65540:   10:  if (*(int*)a > *(int*)b)
    34053:   11:    return 1;
    31487:   12:  if (*(int*)a < *(int*)b)
    31189:   13:    return -1;
      298:   14:  return 0;
    65540:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  //int it;			
        -:   44:  //set up random number generator
       12:   45:  SelectStream(1);
       12:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       24:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       12:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      264:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     2640:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     2280:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
     1200:   66:        }
      120:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       12:   74:  if (numPlayers == 2)
        -:   75:    {
       12:   76:      state->supplyCount[curse] = 10;
       12:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       12:   88:  if (numPlayers == 2)
        -:   89:    {
       12:   90:      state->supplyCount[estate] = 8;
       12:   91:      state->supplyCount[duchy] = 8;
       12:   92:      state->supplyCount[province] = 8;
       12:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       12:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  103:  state->supplyCount[silver] = 40;
       12:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      504:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     3960:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
     1860:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      229:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       23:  116:		  if (numPlayers == 2){ 
       23:  117:		    state->supplyCount[i] = 8; 
       23:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
       23:  120:		}
        -:  121:	      else
        -:  122:		{
       97:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      120:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     1740:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
     1740:  131:	}
        -:  132:
      240:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       72:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       24:  141:      state->deckCount[i] = 0;
      192:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       72:  144:	  state->deck[i][j] = estate;
       72:  145:	  state->deckCount[i]++;
       72:  146:	}
      384:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
      168:  149:	  state->deck[i][j] = copper;
      168:  150:	  state->deckCount[i]++;		
      168:  151:	}
       24:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       72:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       24:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
       24:  161:    }
        -:  162:
        -:  163:  //draw player hands
       72:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       24:  167:      state->handCount[i] = 0;
       24:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
      288:  170:      for (j = 0; j < 5; j++)
        -:  171:      {
      120:  172:      	  drawCard(i, state);
      120:  173:      }
       24:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      672:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      324:  179:      state->embargoTokens[i] = 0;
      324:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       12:  183:  state->outpostPlayed = 0;
       12:  184:  state->phase = 0;
       12:  185:  state->numActions = 1;
       12:  186:  state->numBuys = 1;
       12:  187:  state->playedCardCount = 0;
       12:  188:  state->whoseTurn = 0;
       12:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        -:  193:  //for (it = 0; it < 5; it++){
        -:  194:  //  drawCard(state->whoseTurn, state);
        -:  195:  //}
        -:  196:
       12:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
       12:  199:  return 0;
       12:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       71:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       71:  210:  if (state->deckCount[player] < 1)
        1:  211:    return -1;
       70:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    16894:  215:  while (state->deckCount[player] > 0) {
     8377:  216:    card = floor(Random() * state->deckCount[player]);
     8377:  217:    newDeck[newDeckPos] = state->deck[player][card];
     8377:  218:    newDeckPos++;
  1358926:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   671086:  220:      state->deck[player][i] = state->deck[player][i+1];
   671086:  221:    }
     8377:  222:    state->deckCount[player]--;
        -:  223:  }
    16894:  224:  for (i = 0; i < newDeckPos; i++) {
     8377:  225:    state->deck[player][i] = newDeck[i];
     8377:  226:    state->deckCount[player]++;
     8377:  227:  }
        -:  228:
       70:  229:  return 0;
       71:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       28:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       28:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       28:  244:  if ( state->numActions < 1 )
        -:  245:    {
       23:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        5:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       10:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        5:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        5:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        5:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        5:  270:  return 0;
       28:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       26:  281:  who = state->whoseTurn;
        -:  282:
       26:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       26:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       26:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       26:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       26:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       26:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       26:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       26:  309:  return 0;
       26:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      197:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      428:  317:  int currentPlayer = whoseTurn(state);
      428:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       52:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
        3:  327:  int count = 0;
        -:  328:
       42:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
       31:  331:      if (state->deck[player][i] == card) count++;
       18:  332:    }
        -:  333:
        6:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
       16:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
       10:  341:      if (state->discard[player][i] == card) count++;
        5:  342:    }
        -:  343:
        3:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     6688:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       27:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      334:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      140:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      140:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      140:  360:  }
       27:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       27:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       14:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       14:  366:  }
        -:  367:  else{
       13:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       27:  371:  state->outpostPlayed = 0;
       27:  372:  state->phase = 0;
       27:  373:  state->numActions = 1;
       27:  374:  state->coins = 0;
       27:  375:  state->numBuys = 1;
       27:  376:  state->playedCardCount = 0;
       27:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      324:  381:  for (k = 0; k < 5; k++){
      135:  382:    drawCard(state->whoseTurn, state);//Draw a card
      135:  383:  }
        -:  384:
        -:  385:  //Update money
       27:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       27:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       31:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        2:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       29:  402:  j = 0;
     1508:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      725:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
        3:  407:	  j++;
        3:  408:	}
      725:  409:    }
       29:  410:  if ( j >= 3)
        -:  411:    {
        1:  412:      return 1;
        -:  413:    }
        -:  414:
       28:  415:  return 0;
       31:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       46:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       21:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       23:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       24:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  442:    }
        -:  443:
        -:  444:  //score from deck
       46:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       21:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       23:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       26:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1025580:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    16366:  534:    for (i = 0; i < state->discardCount[player];i++){
     8137:  535:      state->deck[player][i] = state->discard[player][i];
     8137:  536:      state->discard[player][i] = -1;
     8137:  537:    }
        -:  538:
       46:  539:    state->deckCount[player] = state->discardCount[player];
       46:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       46:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       46:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       46:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       46:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       46:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       46:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  564:    state->deckCount[player]--;
       46:  565:    state->handCount[player]++;//Increment hand count
       46:  566:  }
        -:  567:
        -:  568:  else{
  1025534:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1025534:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1025534:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1025534:  577:    state->deckCount[player]--;
  1025534:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1025580:  581:  return 0;
  1025580:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       79:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
        1:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
        1:  593:      return 5;
        -:  594:    case province:
       17:  595:      return 8;
        -:  596:    case copper:
        1:  597:      return 0;
        -:  598:    case silver:
       15:  599:      return 3;
        -:  600:    case gold:
       19:  601:      return 6;
        -:  602:    case adventurer:
        5:  603:      return 6;
        -:  604:    case council_room:
        1:  605:      return 5;
        -:  606:    case feast:
        1:  607:      return 4;
        -:  608:    case gardens:
        1:  609:      return 4;
        -:  610:    case mine:
        1:  611:      return 5;
        -:  612:    case remodel:
        1:  613:      return 4;
        -:  614:    case smithy:
        1:  615:      return 4;
        -:  616:    case village:
        1:  617:      return 3;
        -:  618:    case baron:
        1:  619:      return 4;
        -:  620:    case great_hall:
        1:  621:      return 3;
        -:  622:    case minion:
        1:  623:      return 5;
        -:  624:    case steward:
        1:  625:      return 3;
        -:  626:    case tribute:
        1:  627:      return 5;
        -:  628:    case ambassador:
        1:  629:      return 3;
        -:  630:    case cutpurse:
        1:  631:      return 4;
        -:  632:    case embargo: 
        1:  633:      return 2;
        -:  634:    case outpost:
        1:  635:      return 5;
        -:  636:    case salvager:
        1:  637:      return 4;
        -:  638:    case sea_hag:
        1:  639:      return 4;
        -:  640:    case treasure_map:
        1:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       79:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
     6009:  654:  int currentPlayer = whoseTurn(state);
     6009:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
     6009:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        -:  660:  
     6009:  661:  if (nextPlayer > (state->numPlayers - 1)){
     2983:  662:    nextPlayer = 0;
     2983:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6009:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
     2006:  670:      return adventurer_effect(state, currentPlayer);
        -:  671:
        -:  672:    case council_room:
        1:  673:      return council_room_effect(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
     2001:  793:      return smithy_effect(currentPlayer, state, handPos);
        -:  794:		
        -:  795:    case village:
     2001:  796:      return village_effect(currentPlayer, state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baron_effect(currentPlayer, state, handPos, choice1);
        -:  800:		
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
     6009: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
     8003: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
     8003: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8003: 1131:      state->playedCardCount++;
     8003: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
     8003: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
     8003: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
        5: 1141:      state->handCount[currentPlayer]--;
        5: 1142:    }
     7998: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
     7998: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
     7998: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
     7998: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
     8003: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
       26: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
       26: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
       26: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       26: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
       26: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
       26: 1195:  return 0;
       26: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
       48: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
      436: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
      170: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
       54: 1210:	  state->coins += 1;
       54: 1211:	}
      116: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
       44: 1214:	  state->coins += 2;
       44: 1215:	}
       72: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
       19: 1218:	  state->coins += 3;
       19: 1219:	}	
      170: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
       48: 1223:  state->coins += bonus;
        -: 1224:
       48: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int smithy_effect(int currentPlayer, struct gameState *state, int handPos){ //draw 3 cards
        -: 1229:    int i;
    16008: 1230:    for (i = 0; i < 3; i++)
        -: 1231:    {
     6003: 1232:      drawCard(currentPlayer, state);
     6003: 1233:    }
        -: 1234:        
        -: 1235:    //discard card from hand
     2001: 1236:    discardCard(handPos, currentPlayer, state, 0);
     2001: 1237:    return -1;
        -: 1238:}
        -: 1239:
        -: 1240:int adventurer_effect(struct gameState *state, int currentPlayer){
        -: 1241:    int cardDrawn;
        -: 1242:    int temphand[MAX_HAND];
     2006: 1243:    int z = 0;
     2006: 1244:    int drawntreasure=0;
        -: 1245:    //printf("Inside Adventurer \n");
  1013346: 1246:    while(drawntreasure<2){
   504667: 1247:        if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
        1: 1248:            shuffle(currentPlayer, state);
        1: 1249:        }
   504667: 1250:        drawCard(currentPlayer, state);
   504667: 1251:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1509985: 1252:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4012: 1253:            drawntreasure++;
        -: 1254:        else{
   500655: 1255:            temphand[z]=cardDrawn;
   500655: 1256:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   500655: 1257:            z++;
        -: 1258:        }
        -: 1259:    }
  1005322: 1260:    while(z-1>=0){
   500655: 1261:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   500655: 1262:        z=z-1;
        -: 1263:    }
     2006: 1264:    return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int village_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1268://+1 Card
     2001: 1269:    drawCard(currentPlayer, state);
        -: 1270:        
        -: 1271:    //+2 Actions 
     2001: 1272:    state->numActions = state->numActions + 2;
        -: 1273:        
        -: 1274:    //discard played card from hand
     2001: 1275:    discardCard(handPos, currentPlayer, state, 0);
     2001: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int baron_effect(int currentPlayer, struct gameState *state, int handPos, int choice1){
    #####: 1280:    state->numBuys++;//Increase buys by 1!
    #####: 1281:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1282:	int p = 0;//Iterator for hand!
    #####: 1283:	int card_not_discarded = 0;//Flag for discard set!
    #####: 1284:	while(card_not_discarded){
    #####: 1285:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1286:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1287:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1288:	    state->discardCount[currentPlayer]++;
    #####: 1289:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1290:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1291:	    }
    #####: 1292:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1293:	    state->handCount[currentPlayer]--;
    #####: 1294:	    card_not_discarded = 0;//Exit the loop
    #####: 1295:	  }
    #####: 1296:	  else if (p > state->handCount[currentPlayer]){
        -: 1297:	    if(DEBUG) {
        -: 1298:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1299:	      printf("Must gain an estate if there are any\n");
        -: 1300:	    }
    #####: 1301:	    if (supplyCount(estate, state) > 0){
    #####: 1302:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1303:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1304:	      if (supplyCount(estate, state) == 0){
    #####: 1305:		isGameOver(state);
    #####: 1306:	      }
    #####: 1307:	    }
    #####: 1308:	    card_not_discarded = 0;//Exit the loop
    #####: 1309:	  }
        -: 1310:			    
        -: 1311:	  else{
    #####: 1312:	    p++;//Next card
        -: 1313:	  }
        -: 1314:	}
    #####: 1315:      }
        -: 1316:			    
        -: 1317:      else{
    #####: 1318:	if (supplyCount(estate, state) > 0){
    #####: 1319:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1320:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1321:	  if (supplyCount(estate, state) == 0){
    #####: 1322:	    isGameOver(state);
    #####: 1323:	  }
    #####: 1324:	}
        -: 1325:      }
    #####: 1326:    return 0;
        -: 1327:}
        -: 1328:
        -: 1329:int council_room_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1330:    int i;
        -: 1331:    
        -: 1332:    //+4 Cards
       10: 1333:      for (i = 0; i < 4; i++)
        -: 1334:	{
        4: 1335:	  drawCard(currentPlayer, state);
        4: 1336:	}
        -: 1337:			
        -: 1338:      //+1 Buy
        1: 1339:      state->numBuys++;
        -: 1340:			
        -: 1341:      //Each other player draws a card
        6: 1342:      for (i = 0; i < state->numPlayers; i++)
        -: 1343:	{
        2: 1344:	  if ( i != currentPlayer )
        -: 1345:	    {
        1: 1346:	      drawCard(i, state);
        1: 1347:	    }
        2: 1348:	}
        -: 1349:			
        -: 1350:      //put played card in played card pile
        1: 1351:      discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
        1: 1353:      return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of cards.c
        -: 1358://end of dominion.c
        -: 1359:
