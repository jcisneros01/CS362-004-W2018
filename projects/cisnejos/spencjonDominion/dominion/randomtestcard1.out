Result for running Smithy Random Tests:
randomtestcard1.c:
Testing Card: Smithy

Random Test #: 1 

Random Test #: 2 

Random Test #: 3 

Random Test #: 4 

Random Test #: 5 

Random Test #: 6 

Random Test #: 7 

Random Test #: 8 

Random Test #: 9 

Random Test #: 10 

Random Test #: 11 

Random Test #: 12 

Random Test #: 13 

Random Test #: 14 

Random Test #: 15 

Random Test #: 16 

Random Test #: 17 

Random Test #: 18 

Random Test #: 19 

Random Test #: 20 

Random Test #: 21 

Random Test #: 22 

Random Test #: 23 

Random Test #: 24 

Random Test #: 25 

Random Test #: 26 

Random Test #: 27 

Random Test #: 28 

Random Test #: 29 

Random Test #: 30 

Random Test #: 31 

Random Test #: 32 

Random Test #: 33 

Random Test #: 34 

Random Test #: 35 

Random Test #: 36 

Random Test #: 37 

Random Test #: 38 

Random Test #: 39 

Random Test #: 40 

Random Test #: 41 

Random Test #: 42 

Random Test #: 43 

Random Test #: 44 

Random Test #: 45 

Random Test #: 46 

Random Test #: 47 

Random Test #: 48 

Random Test #: 49 

Random Test #: 50 

Random Test #: 51 

Random Test #: 52 

Random Test #: 53 

Random Test #: 54 

Random Test #: 55 

Random Test #: 56 

Random Test #: 57 

Random Test #: 58 

Random Test #: 59 

Random Test #: 60 

Random Test #: 61 

Random Test #: 62 

Random Test #: 63 

Random Test #: 64 

Random Test #: 65 

Random Test #: 66 

Random Test #: 67 

Random Test #: 68 

Random Test #: 69 

Random Test #: 70 

Random Test #: 71 

Random Test #: 72 

Random Test #: 73 

Random Test #: 74 

Random Test #: 75 

Random Test #: 76 

Random Test #: 77 

Random Test #: 78 

Random Test #: 79 

Random Test #: 80 

Random Test #: 81 

Random Test #: 82 

Random Test #: 83 

Random Test #: 84 

Random Test #: 85 

Random Test #: 86 

Random Test #: 87 

Random Test #: 88 

Random Test #: 89 

Random Test #: 90 

Random Test #: 91 

Random Test #: 92 

Random Test #: 93 

Random Test #: 94 

Random Test #: 95 

Random Test #: 96 

Random Test #: 97 

Random Test #: 98 

Random Test #: 99 

Random Test #: 100 

Random Test #: 101 

Random Test #: 102 

Random Test #: 103 

Random Test #: 104 

Random Test #: 105 

Random Test #: 106 

Random Test #: 107 

Random Test #: 108 

Random Test #: 109 

Random Test #: 110 

Random Test #: 111 

Random Test #: 112 

Random Test #: 113 

Random Test #: 114 

Random Test #: 115 

Random Test #: 116 

Random Test #: 117 

Random Test #: 118 

Random Test #: 119 

Random Test #: 120 

Random Test #: 121 

Random Test #: 122 

Random Test #: 123 

Random Test #: 124 

Random Test #: 125 

Random Test #: 126 

Random Test #: 127 

Random Test #: 128 

Random Test #: 129 

Random Test #: 130 

Random Test #: 131 

Random Test #: 132 

Random Test #: 133 

Random Test #: 134 

Random Test #: 135 

Random Test #: 136 

Random Test #: 137 

Random Test #: 138 

Random Test #: 139 

Random Test #: 140 

Random Test #: 141 

Random Test #: 142 

Random Test #: 143 

Random Test #: 144 

Random Test #: 145 

Random Test #: 146 

Random Test #: 147 

Random Test #: 148 

Random Test #: 149 

Random Test #: 150 

Random Test #: 151 

Random Test #: 152 

Random Test #: 153 

Random Test #: 154 

Random Test #: 155 

Random Test #: 156 

Random Test #: 157 

Random Test #: 158 

Random Test #: 159 

Random Test #: 160 

Random Test #: 161 

Random Test #: 162 

Random Test #: 163 

Random Test #: 164 

Random Test #: 165 

Random Test #: 166 

Random Test #: 167 

Random Test #: 168 

Random Test #: 169 

Random Test #: 170 

Random Test #: 171 

Random Test #: 172 

Random Test #: 173 

Random Test #: 174 

Random Test #: 175 

Random Test #: 176 

Random Test #: 177 

Random Test #: 178 

Random Test #: 179 

Random Test #: 180 

Random Test #: 181 

Random Test #: 182 

Random Test #: 183 

Random Test #: 184 

Random Test #: 185 

Random Test #: 186 

Random Test #: 187 

Random Test #: 188 

Random Test #: 189 

Random Test #: 190 

Random Test #: 191 

Random Test #: 192 

Random Test #: 193 

Random Test #: 194 

Random Test #: 195 

Random Test #: 196 

Random Test #: 197 

Random Test #: 198 

Random Test #: 199 

Random Test #: 200 

Random Test #: 201 

Random Test #: 202 

Random Test #: 203 

Random Test #: 204 

Random Test #: 205 

Random Test #: 206 

Random Test #: 207 

Random Test #: 208 

Random Test #: 209 

Random Test #: 210 

Random Test #: 211 

Random Test #: 212 

Random Test #: 213 

Random Test #: 214 

Random Test #: 215 

Random Test #: 216 

Random Test #: 217 

Random Test #: 218 

Random Test #: 219 

Random Test #: 220 

Random Test #: 221 

Random Test #: 222 

Random Test #: 223 

Random Test #: 224 

Random Test #: 225 

Random Test #: 226 

Random Test #: 227 

Random Test #: 228 

Random Test #: 229 

Random Test #: 230 

Random Test #: 231 

Random Test #: 232 

Random Test #: 233 

Random Test #: 234 

Random Test #: 235 

Random Test #: 236 

Random Test #: 237 

Random Test #: 238 

Random Test #: 239 

Random Test #: 240 

Random Test #: 241 

Random Test #: 242 

Random Test #: 243 

Random Test #: 244 

Random Test #: 245 

Random Test #: 246 

Random Test #: 247 

Random Test #: 248 

Random Test #: 249 

Random Test #: 250 

Random Test #: 251 

Random Test #: 252 

Random Test #: 253 

Random Test #: 254 

Random Test #: 255 

Random Test #: 256 

Random Test #: 257 

Random Test #: 258 

Random Test #: 259 

Random Test #: 260 

Random Test #: 261 

Random Test #: 262 

Random Test #: 263 

Random Test #: 264 

Random Test #: 265 

Random Test #: 266 

Random Test #: 267 

Random Test #: 268 

Random Test #: 269 

Random Test #: 270 

Random Test #: 271 

Random Test #: 272 

Random Test #: 273 

Random Test #: 274 

Random Test #: 275 

Random Test #: 276 

Random Test #: 277 

Random Test #: 278 

Random Test #: 279 

Random Test #: 280 

Random Test #: 281 

Random Test #: 282 

Random Test #: 283 

Random Test #: 284 

Random Test #: 285 

Random Test #: 286 

Random Test #: 287 

Random Test #: 288 

Random Test #: 289 

Random Test #: 290 

Random Test #: 291 

Random Test #: 292 

Random Test #: 293 

Random Test #: 294 

Random Test #: 295 

Random Test #: 296 

Random Test #: 297 

Random Test #: 298 

Random Test #: 299 

Random Test #: 300 

Random Test #: 301 

Random Test #: 302 

Random Test #: 303 

Random Test #: 304 

Random Test #: 305 

Random Test #: 306 

Random Test #: 307 

Random Test #: 308 

Random Test #: 309 

Random Test #: 310 

Random Test #: 311 

Random Test #: 312 

Random Test #: 313 

Random Test #: 314 

Random Test #: 315 

Random Test #: 316 

Random Test #: 317 

Random Test #: 318 

Random Test #: 319 

Random Test #: 320 

Random Test #: 321 

Random Test #: 322 

Random Test #: 323 

Random Test #: 324 

Random Test #: 325 

Random Test #: 326 

Random Test #: 327 

Random Test #: 328 

Random Test #: 329 

Random Test #: 330 

Random Test #: 331 

Random Test #: 332 

Random Test #: 333 

Random Test #: 334 

Random Test #: 335 

Random Test #: 336 

Random Test #: 337 

Random Test #: 338 

Random Test #: 339 

Random Test #: 340 

Random Test #: 341 

Random Test #: 342 

Random Test #: 343 

Random Test #: 344 

Random Test #: 345 

Random Test #: 346 

Random Test #: 347 

Random Test #: 348 

Random Test #: 349 

Random Test #: 350 

Random Test #: 351 

Random Test #: 352 

Random Test #: 353 

Random Test #: 354 

Random Test #: 355 

Random Test #: 356 

Random Test #: 357 

Random Test #: 358 

Random Test #: 359 

Random Test #: 360 

Random Test #: 361 

Random Test #: 362 

Random Test #: 363 

Random Test #: 364 

Random Test #: 365 

Random Test #: 366 

Random Test #: 367 

Random Test #: 368 

Random Test #: 369 

Random Test #: 370 

Random Test #: 371 

Random Test #: 372 

Random Test #: 373 

Random Test #: 374 

Random Test #: 375 

Random Test #: 376 

Random Test #: 377 

Random Test #: 378 

Random Test #: 379 

Random Test #: 380 

Random Test #: 381 

Random Test #: 382 

Random Test #: 383 

Random Test #: 384 

Random Test #: 385 

Random Test #: 386 

Random Test #: 387 

Random Test #: 388 

Random Test #: 389 

Random Test #: 390 

Random Test #: 391 

Random Test #: 392 

Random Test #: 393 

Random Test #: 394 

Random Test #: 395 

Random Test #: 396 

Random Test #: 397 

Random Test #: 398 

Random Test #: 399 

Random Test #: 400 

Random Test #: 401 

Random Test #: 402 

Random Test #: 403 

Random Test #: 404 

Random Test #: 405 

Random Test #: 406 

Random Test #: 407 

Random Test #: 408 

Random Test #: 409 

Random Test #: 410 

Random Test #: 411 

Random Test #: 412 

Random Test #: 413 

Random Test #: 414 

Random Test #: 415 

Random Test #: 416 

Random Test #: 417 

Random Test #: 418 

Random Test #: 419 

Random Test #: 420 

Random Test #: 421 

Random Test #: 422 

Random Test #: 423 

Random Test #: 424 

Random Test #: 425 

Random Test #: 426 

Random Test #: 427 

Random Test #: 428 

Random Test #: 429 

Random Test #: 430 

Random Test #: 431 

Random Test #: 432 

Random Test #: 433 

Random Test #: 434 

Random Test #: 435 

Random Test #: 436 

Random Test #: 437 

Random Test #: 438 

Random Test #: 439 

Random Test #: 440 

Random Test #: 441 

Random Test #: 442 

Random Test #: 443 

Random Test #: 444 

Random Test #: 445 

Random Test #: 446 

Random Test #: 447 

Random Test #: 448 

Random Test #: 449 

Random Test #: 450 

Random Test #: 451 

Random Test #: 452 

Random Test #: 453 

Random Test #: 454 

Random Test #: 455 

Random Test #: 456 

Random Test #: 457 

Random Test #: 458 

Random Test #: 459 

Random Test #: 460 

Random Test #: 461 

Random Test #: 462 

Random Test #: 463 

Random Test #: 464 

Random Test #: 465 

Random Test #: 466 

Random Test #: 467 

Random Test #: 468 

Random Test #: 469 

Random Test #: 470 

Random Test #: 471 

Random Test #: 472 

Random Test #: 473 

Random Test #: 474 

Random Test #: 475 

Random Test #: 476 

Random Test #: 477 

Random Test #: 478 

Random Test #: 479 

Random Test #: 480 

Random Test #: 481 

Random Test #: 482 

Random Test #: 483 

Random Test #: 484 

Random Test #: 485 

Random Test #: 486 

Random Test #: 487 

Random Test #: 488 

Random Test #: 489 

Random Test #: 490 

Random Test #: 491 

Random Test #: 492 

Random Test #: 493 

Random Test #: 494 

Random Test #: 495 

Random Test #: 496 

Random Test #: 497 

Random Test #: 498 

Random Test #: 499 

Random Test #: 500 

Random Test #: 501 

Random Test #: 502 

Random Test #: 503 

Random Test #: 504 

Random Test #: 505 

Random Test #: 506 

Random Test #: 507 

Random Test #: 508 

Random Test #: 509 

Random Test #: 510 

Random Test #: 511 

Random Test #: 512 

Random Test #: 513 

Random Test #: 514 

Random Test #: 515 

Random Test #: 516 

Random Test #: 517 

Random Test #: 518 

Random Test #: 519 

Random Test #: 520 

Random Test #: 521 

Random Test #: 522 

Random Test #: 523 

Random Test #: 524 

Random Test #: 525 

Random Test #: 526 

Random Test #: 527 

Random Test #: 528 

Random Test #: 529 

Random Test #: 530 

Random Test #: 531 

Random Test #: 532 

Random Test #: 533 

Random Test #: 534 

Random Test #: 535 

Random Test #: 536 

Random Test #: 537 

Random Test #: 538 

Random Test #: 539 

Random Test #: 540 

Random Test #: 541 

Random Test #: 542 

Random Test #: 543 

Random Test #: 544 

Random Test #: 545 

Random Test #: 546 

Random Test #: 547 

Random Test #: 548 

Random Test #: 549 

Random Test #: 550 

Random Test #: 551 

Random Test #: 552 

Random Test #: 553 

Random Test #: 554 

Random Test #: 555 

Random Test #: 556 

Random Test #: 557 

Random Test #: 558 

Random Test #: 559 

Random Test #: 560 

Random Test #: 561 

Random Test #: 562 

Random Test #: 563 

Random Test #: 564 

Random Test #: 565 

Random Test #: 566 

Random Test #: 567 

Random Test #: 568 

Random Test #: 569 

Random Test #: 570 

Random Test #: 571 

Random Test #: 572 

Random Test #: 573 

Random Test #: 574 

Random Test #: 575 

Random Test #: 576 

Random Test #: 577 

Random Test #: 578 

Random Test #: 579 

Random Test #: 580 

Random Test #: 581 

Random Test #: 582 

Random Test #: 583 

Random Test #: 584 

Random Test #: 585 

Random Test #: 586 

Random Test #: 587 

Random Test #: 588 

Random Test #: 589 

Random Test #: 590 

Random Test #: 591 

Random Test #: 592 

Random Test #: 593 

Random Test #: 594 

Random Test #: 595 

Random Test #: 596 

Random Test #: 597 

Random Test #: 598 

Random Test #: 599 

Random Test #: 600 

Random Test #: 601 

Random Test #: 602 

Random Test #: 603 

Random Test #: 604 

Random Test #: 605 

Random Test #: 606 

Random Test #: 607 

Random Test #: 608 

Random Test #: 609 

Random Test #: 610 

Random Test #: 611 

Random Test #: 612 

Random Test #: 613 

Random Test #: 614 

Random Test #: 615 

Random Test #: 616 

Random Test #: 617 

Random Test #: 618 

Random Test #: 619 

Random Test #: 620 

Random Test #: 621 

Random Test #: 622 

Random Test #: 623 

Random Test #: 624 

Random Test #: 625 

Random Test #: 626 

Random Test #: 627 

Random Test #: 628 

Random Test #: 629 

Random Test #: 630 

Random Test #: 631 

Random Test #: 632 

Random Test #: 633 

Random Test #: 634 

Random Test #: 635 

Random Test #: 636 

Random Test #: 637 

Random Test #: 638 

Random Test #: 639 

Random Test #: 640 

Random Test #: 641 

Random Test #: 642 

Random Test #: 643 

Random Test #: 644 

Random Test #: 645 

Random Test #: 646 

Random Test #: 647 

Random Test #: 648 

Random Test #: 649 

Random Test #: 650 

Random Test #: 651 

Random Test #: 652 

Random Test #: 653 

Random Test #: 654 

Random Test #: 655 

Random Test #: 656 

Random Test #: 657 

Random Test #: 658 

Random Test #: 659 

Random Test #: 660 

Random Test #: 661 

Random Test #: 662 

Random Test #: 663 

Random Test #: 664 

Random Test #: 665 

Random Test #: 666 

Random Test #: 667 

Random Test #: 668 

Random Test #: 669 

Random Test #: 670 

Random Test #: 671 

Random Test #: 672 

Random Test #: 673 

Random Test #: 674 

Random Test #: 675 

Random Test #: 676 

Random Test #: 677 

Random Test #: 678 

Random Test #: 679 

Random Test #: 680 

Random Test #: 681 

Random Test #: 682 

Random Test #: 683 

Random Test #: 684 

Random Test #: 685 

Random Test #: 686 

Random Test #: 687 

Random Test #: 688 

Random Test #: 689 

Random Test #: 690 

Random Test #: 691 

Random Test #: 692 

Random Test #: 693 

Random Test #: 694 

Random Test #: 695 

Random Test #: 696 

Random Test #: 697 

Random Test #: 698 

Random Test #: 699 

Random Test #: 700 

Random Test #: 701 

Random Test #: 702 

Random Test #: 703 

Random Test #: 704 

Random Test #: 705 

Random Test #: 706 

Random Test #: 707 

Random Test #: 708 

Random Test #: 709 

Random Test #: 710 

Random Test #: 711 

Random Test #: 712 

Random Test #: 713 

Random Test #: 714 

Random Test #: 715 

Random Test #: 716 

Random Test #: 717 

Random Test #: 718 

Random Test #: 719 

Random Test #: 720 

Random Test #: 721 

Random Test #: 722 

Random Test #: 723 

Random Test #: 724 

Random Test #: 725 

Random Test #: 726 

Random Test #: 727 

Random Test #: 728 

Random Test #: 729 

Random Test #: 730 

Random Test #: 731 

Random Test #: 732 

Random Test #: 733 

Random Test #: 734 

Random Test #: 735 

Random Test #: 736 

Random Test #: 737 

Random Test #: 738 

Random Test #: 739 

Random Test #: 740 

Random Test #: 741 

Random Test #: 742 

Random Test #: 743 

Random Test #: 744 

Random Test #: 745 

Random Test #: 746 

Random Test #: 747 

Random Test #: 748 

Random Test #: 749 

Random Test #: 750 

Random Test #: 751 

Random Test #: 752 

Random Test #: 753 

Random Test #: 754 

Random Test #: 755 

Random Test #: 756 

Random Test #: 757 

Random Test #: 758 

Random Test #: 759 

Random Test #: 760 

Random Test #: 761 

Random Test #: 762 

Random Test #: 763 

Random Test #: 764 

Random Test #: 765 

Random Test #: 766 

Random Test #: 767 

Random Test #: 768 

Random Test #: 769 

Random Test #: 770 

Random Test #: 771 

Random Test #: 772 

Random Test #: 773 

Random Test #: 774 

Random Test #: 775 

Random Test #: 776 

Random Test #: 777 

Random Test #: 778 

Random Test #: 779 

Random Test #: 780 

Random Test #: 781 

Random Test #: 782 

Random Test #: 783 

Random Test #: 784 

Random Test #: 785 

Random Test #: 786 

Random Test #: 787 

Random Test #: 788 

Random Test #: 789 

Random Test #: 790 

Random Test #: 791 

Random Test #: 792 

Random Test #: 793 

Random Test #: 794 

Random Test #: 795 

Random Test #: 796 

Random Test #: 797 

Random Test #: 798 

Random Test #: 799 

Random Test #: 800 

Random Test #: 801 

Random Test #: 802 

Random Test #: 803 

Random Test #: 804 

Random Test #: 805 

Random Test #: 806 

Random Test #: 807 

Random Test #: 808 

Random Test #: 809 

Random Test #: 810 

Random Test #: 811 

Random Test #: 812 

Random Test #: 813 

Random Test #: 814 

Random Test #: 815 

Random Test #: 816 

Random Test #: 817 

Random Test #: 818 

Random Test #: 819 

Random Test #: 820 

Random Test #: 821 

Random Test #: 822 

Random Test #: 823 

Random Test #: 824 

Random Test #: 825 

Random Test #: 826 

Random Test #: 827 

Random Test #: 828 

Random Test #: 829 

Random Test #: 830 

Random Test #: 831 

Random Test #: 832 

Random Test #: 833 

Random Test #: 834 

Random Test #: 835 

Random Test #: 836 

Random Test #: 837 

Random Test #: 838 

Random Test #: 839 

Random Test #: 840 

Random Test #: 841 

Random Test #: 842 

Random Test #: 843 

Random Test #: 844 

Random Test #: 845 

Random Test #: 846 

Random Test #: 847 

Random Test #: 848 

Random Test #: 849 

Random Test #: 850 

Random Test #: 851 

Random Test #: 852 

Random Test #: 853 

Random Test #: 854 

Random Test #: 855 

Random Test #: 856 

Random Test #: 857 

Random Test #: 858 

Random Test #: 859 

Random Test #: 860 

Random Test #: 861 

Random Test #: 862 

Random Test #: 863 

Random Test #: 864 

Random Test #: 865 

Random Test #: 866 

Random Test #: 867 

Random Test #: 868 

Random Test #: 869 

Random Test #: 870 

Random Test #: 871 

Random Test #: 872 

Random Test #: 873 

Random Test #: 874 

Random Test #: 875 

Random Test #: 876 

Random Test #: 877 

Random Test #: 878 

Random Test #: 879 

Random Test #: 880 

Random Test #: 881 

Random Test #: 882 

Random Test #: 883 

Random Test #: 884 

Random Test #: 885 

Random Test #: 886 

Random Test #: 887 

Random Test #: 888 

Random Test #: 889 

Random Test #: 890 

Random Test #: 891 

Random Test #: 892 

Random Test #: 893 

Random Test #: 894 

Random Test #: 895 

Random Test #: 896 

Random Test #: 897 

Random Test #: 898 

Random Test #: 899 

Random Test #: 900 

Random Test #: 901 

Random Test #: 902 

Random Test #: 903 

Random Test #: 904 

Random Test #: 905 

Random Test #: 906 

Random Test #: 907 

Random Test #: 908 

Random Test #: 909 

Random Test #: 910 

Random Test #: 911 

Random Test #: 912 

Random Test #: 913 

Random Test #: 914 

Random Test #: 915 

Random Test #: 916 

Random Test #: 917 

Random Test #: 918 

Random Test #: 919 

Random Test #: 920 

Random Test #: 921 

Random Test #: 922 

Random Test #: 923 

Random Test #: 924 

Random Test #: 925 

Random Test #: 926 

Random Test #: 927 

Random Test #: 928 

Random Test #: 929 

Random Test #: 930 

Random Test #: 931 

Random Test #: 932 

Random Test #: 933 

Random Test #: 934 

Random Test #: 935 

Random Test #: 936 

Random Test #: 937 

Random Test #: 938 

Random Test #: 939 

Random Test #: 940 

Random Test #: 941 

Random Test #: 942 

Random Test #: 943 

Random Test #: 944 

Random Test #: 945 

Random Test #: 946 

Random Test #: 947 

Random Test #: 948 

Random Test #: 949 

Random Test #: 950 

Random Test #: 951 

Random Test #: 952 

Random Test #: 953 

Random Test #: 954 

Random Test #: 955 

Random Test #: 956 

Random Test #: 957 

Random Test #: 958 

Random Test #: 959 

Random Test #: 960 

Random Test #: 961 

Random Test #: 962 

Random Test #: 963 

Random Test #: 964 

Random Test #: 965 

Random Test #: 966 

Random Test #: 967 

Random Test #: 968 

Random Test #: 969 

Random Test #: 970 

Random Test #: 971 

Random Test #: 972 

Random Test #: 973 

Random Test #: 974 

Random Test #: 975 

Random Test #: 976 

Random Test #: 977 

Random Test #: 978 

Random Test #: 979 

Random Test #: 980 

Random Test #: 981 

Random Test #: 982 

Random Test #: 983 

Random Test #: 984 

Random Test #: 985 

Random Test #: 986 

Random Test #: 987 

Random Test #: 988 

Random Test #: 989 

Random Test #: 990 

Random Test #: 991 

Random Test #: 992 

Random Test #: 993 

Random Test #: 994 

Random Test #: 995 

Random Test #: 996 

Random Test #: 997 

Random Test #: 998 

Random Test #: 999 

Random Test #: 1000 

Random Test #: 1001 

Random Test #: 1002 

Random Test #: 1003 

Random Test #: 1004 

Random Test #: 1005 

Random Test #: 1006 

Random Test #: 1007 

Random Test #: 1008 

Random Test #: 1009 

Random Test #: 1010 

Random Test #: 1011 

Random Test #: 1012 

Random Test #: 1013 

Random Test #: 1014 

Random Test #: 1015 

Random Test #: 1016 

Random Test #: 1017 

Random Test #: 1018 

Random Test #: 1019 

Random Test #: 1020 

Random Test #: 1021 

Random Test #: 1022 

Random Test #: 1023 

Random Test #: 1024 

Random Test #: 1025 

Random Test #: 1026 

Random Test #: 1027 

Random Test #: 1028 

Random Test #: 1029 

Random Test #: 1030 

Random Test #: 1031 

Random Test #: 1032 

Random Test #: 1033 

Random Test #: 1034 

Random Test #: 1035 

Random Test #: 1036 

Random Test #: 1037 

Random Test #: 1038 

Random Test #: 1039 

Random Test #: 1040 

Random Test #: 1041 

Random Test #: 1042 

Random Test #: 1043 

Random Test #: 1044 

Random Test #: 1045 

Random Test #: 1046 

Random Test #: 1047 

Random Test #: 1048 

Random Test #: 1049 

Random Test #: 1050 

Random Test #: 1051 

Random Test #: 1052 

Random Test #: 1053 

Random Test #: 1054 

Random Test #: 1055 

Random Test #: 1056 

Random Test #: 1057 

Random Test #: 1058 

Random Test #: 1059 

Random Test #: 1060 

Random Test #: 1061 

Random Test #: 1062 

Random Test #: 1063 

Random Test #: 1064 

Random Test #: 1065 

Random Test #: 1066 

Random Test #: 1067 

Random Test #: 1068 

Random Test #: 1069 

Random Test #: 1070 

Random Test #: 1071 

Random Test #: 1072 

Random Test #: 1073 

Random Test #: 1074 

Random Test #: 1075 

Random Test #: 1076 

Random Test #: 1077 

Random Test #: 1078 

Random Test #: 1079 

Random Test #: 1080 

Random Test #: 1081 

Random Test #: 1082 

Random Test #: 1083 

Random Test #: 1084 

Random Test #: 1085 

Random Test #: 1086 

Random Test #: 1087 

Random Test #: 1088 

Random Test #: 1089 

Random Test #: 1090 

Random Test #: 1091 

Random Test #: 1092 

Random Test #: 1093 

Random Test #: 1094 

Random Test #: 1095 

Random Test #: 1096 

Random Test #: 1097 

Random Test #: 1098 

Random Test #: 1099 

Random Test #: 1100 

Random Test #: 1101 

Random Test #: 1102 

Random Test #: 1103 

Random Test #: 1104 

Random Test #: 1105 

Random Test #: 1106 

Random Test #: 1107 

Random Test #: 1108 

Random Test #: 1109 

Random Test #: 1110 

Random Test #: 1111 

Random Test #: 1112 

Random Test #: 1113 

Random Test #: 1114 

Random Test #: 1115 

Random Test #: 1116 

Random Test #: 1117 

Random Test #: 1118 

Random Test #: 1119 

Random Test #: 1120 

Random Test #: 1121 

Random Test #: 1122 

Random Test #: 1123 

Random Test #: 1124 

Random Test #: 1125 

Random Test #: 1126 

Random Test #: 1127 

Random Test #: 1128 

Random Test #: 1129 

Random Test #: 1130 

Random Test #: 1131 

Random Test #: 1132 

Random Test #: 1133 

Random Test #: 1134 

Random Test #: 1135 

Random Test #: 1136 

Random Test #: 1137 

Random Test #: 1138 

Random Test #: 1139 

Random Test #: 1140 

Random Test #: 1141 

Random Test #: 1142 

Random Test #: 1143 

Random Test #: 1144 

Random Test #: 1145 

Random Test #: 1146 

Random Test #: 1147 

Random Test #: 1148 

Random Test #: 1149 

Random Test #: 1150 

Random Test #: 1151 

Random Test #: 1152 

Random Test #: 1153 

Random Test #: 1154 

Random Test #: 1155 

Random Test #: 1156 

Random Test #: 1157 

Random Test #: 1158 

Random Test #: 1159 

Random Test #: 1160 

Random Test #: 1161 

Random Test #: 1162 

Random Test #: 1163 

Random Test #: 1164 

Random Test #: 1165 

Random Test #: 1166 

Random Test #: 1167 

Random Test #: 1168 

Random Test #: 1169 

Random Test #: 1170 

Random Test #: 1171 

Random Test #: 1172 

Random Test #: 1173 

Random Test #: 1174 

Random Test #: 1175 

Random Test #: 1176 

Random Test #: 1177 

Random Test #: 1178 

Random Test #: 1179 

Random Test #: 1180 

Random Test #: 1181 

Random Test #: 1182 

Random Test #: 1183 

Random Test #: 1184 

Random Test #: 1185 

Random Test #: 1186 

Random Test #: 1187 

Random Test #: 1188 

Random Test #: 1189 

Random Test #: 1190 

Random Test #: 1191 

Random Test #: 1192 

Random Test #: 1193 

Random Test #: 1194 

Random Test #: 1195 

Random Test #: 1196 

Random Test #: 1197 

Random Test #: 1198 

Random Test #: 1199 

Random Test #: 1200 

Random Test #: 1201 

Random Test #: 1202 

Random Test #: 1203 

Random Test #: 1204 

Random Test #: 1205 

Random Test #: 1206 

Random Test #: 1207 

Random Test #: 1208 

Random Test #: 1209 

Random Test #: 1210 

Random Test #: 1211 

Random Test #: 1212 

Random Test #: 1213 

Random Test #: 1214 

Random Test #: 1215 

Random Test #: 1216 

Random Test #: 1217 

Random Test #: 1218 

Random Test #: 1219 

Random Test #: 1220 

Random Test #: 1221 

Random Test #: 1222 

Random Test #: 1223 

Random Test #: 1224 

Random Test #: 1225 

Random Test #: 1226 

Random Test #: 1227 

Random Test #: 1228 

Random Test #: 1229 

Random Test #: 1230 

Random Test #: 1231 

Random Test #: 1232 

Random Test #: 1233 

Random Test #: 1234 

Random Test #: 1235 

Random Test #: 1236 

Random Test #: 1237 

Random Test #: 1238 

Random Test #: 1239 

Random Test #: 1240 

Random Test #: 1241 

Random Test #: 1242 

Random Test #: 1243 

Random Test #: 1244 

Random Test #: 1245 

Random Test #: 1246 

Random Test #: 1247 

Random Test #: 1248 

Random Test #: 1249 

Random Test #: 1250 

Random Test #: 1251 

Random Test #: 1252 

Random Test #: 1253 

Random Test #: 1254 

Random Test #: 1255 

Random Test #: 1256 

Random Test #: 1257 

Random Test #: 1258 

Random Test #: 1259 

Random Test #: 1260 

Random Test #: 1261 

Random Test #: 1262 

Random Test #: 1263 

Random Test #: 1264 

Random Test #: 1265 

Random Test #: 1266 

Random Test #: 1267 

Random Test #: 1268 

Random Test #: 1269 

Random Test #: 1270 

Random Test #: 1271 

Random Test #: 1272 

Random Test #: 1273 

Random Test #: 1274 

Random Test #: 1275 

Random Test #: 1276 

Random Test #: 1277 

Random Test #: 1278 

Random Test #: 1279 

Random Test #: 1280 

Random Test #: 1281 

Random Test #: 1282 

Random Test #: 1283 

Random Test #: 1284 

Random Test #: 1285 

Random Test #: 1286 

Random Test #: 1287 

Random Test #: 1288 

Random Test #: 1289 

Random Test #: 1290 

Random Test #: 1291 

Random Test #: 1292 

Random Test #: 1293 

Random Test #: 1294 

Random Test #: 1295 

Random Test #: 1296 

Random Test #: 1297 

Random Test #: 1298 

Random Test #: 1299 

Random Test #: 1300 

Random Test #: 1301 

Random Test #: 1302 

Random Test #: 1303 

Random Test #: 1304 

Random Test #: 1305 

Random Test #: 1306 

Random Test #: 1307 

Random Test #: 1308 

Random Test #: 1309 

Random Test #: 1310 

Random Test #: 1311 

Random Test #: 1312 

Random Test #: 1313 

Random Test #: 1314 

Random Test #: 1315 

Random Test #: 1316 

Random Test #: 1317 

Random Test #: 1318 

Random Test #: 1319 

Random Test #: 1320 

Random Test #: 1321 

Random Test #: 1322 

Random Test #: 1323 

Random Test #: 1324 

Random Test #: 1325 

Random Test #: 1326 

Random Test #: 1327 

Random Test #: 1328 

Random Test #: 1329 

Random Test #: 1330 

Random Test #: 1331 

Random Test #: 1332 

Random Test #: 1333 

Random Test #: 1334 

Random Test #: 1335 

Random Test #: 1336 

Random Test #: 1337 

Random Test #: 1338 

Random Test #: 1339 

Random Test #: 1340 

Random Test #: 1341 

Random Test #: 1342 

Random Test #: 1343 

Random Test #: 1344 

Random Test #: 1345 

Random Test #: 1346 

Random Test #: 1347 

Random Test #: 1348 

Random Test #: 1349 

Random Test #: 1350 

Random Test #: 1351 

Random Test #: 1352 

Random Test #: 1353 

Random Test #: 1354 

Random Test #: 1355 

Random Test #: 1356 

Random Test #: 1357 

Random Test #: 1358 

Random Test #: 1359 

Random Test #: 1360 

Random Test #: 1361 

Random Test #: 1362 

Random Test #: 1363 

Random Test #: 1364 

Random Test #: 1365 

Random Test #: 1366 

Random Test #: 1367 

Random Test #: 1368 

Random Test #: 1369 

Random Test #: 1370 

Random Test #: 1371 

Random Test #: 1372 

Random Test #: 1373 

Random Test #: 1374 

Random Test #: 1375 

Random Test #: 1376 

Random Test #: 1377 

Random Test #: 1378 

Random Test #: 1379 

Random Test #: 1380 

Random Test #: 1381 

Random Test #: 1382 

Random Test #: 1383 

Random Test #: 1384 

Random Test #: 1385 

Random Test #: 1386 

Random Test #: 1387 

Random Test #: 1388 

Random Test #: 1389 

Random Test #: 1390 

Random Test #: 1391 

Random Test #: 1392 

Random Test #: 1393 

Random Test #: 1394 

Random Test #: 1395 

Random Test #: 1396 

Random Test #: 1397 

Random Test #: 1398 

Random Test #: 1399 

Random Test #: 1400 

Random Test #: 1401 

Random Test #: 1402 

Random Test #: 1403 

Random Test #: 1404 

Random Test #: 1405 

Random Test #: 1406 

Random Test #: 1407 

Random Test #: 1408 

Random Test #: 1409 

Random Test #: 1410 

Random Test #: 1411 

Random Test #: 1412 

Random Test #: 1413 

Random Test #: 1414 

Random Test #: 1415 

Random Test #: 1416 

Random Test #: 1417 

Random Test #: 1418 

Random Test #: 1419 

Random Test #: 1420 

Random Test #: 1421 

Random Test #: 1422 

Random Test #: 1423 

Random Test #: 1424 

Random Test #: 1425 

Random Test #: 1426 

Random Test #: 1427 

Random Test #: 1428 

Random Test #: 1429 

Random Test #: 1430 

Random Test #: 1431 

Random Test #: 1432 

Random Test #: 1433 

Random Test #: 1434 

Random Test #: 1435 

Random Test #: 1436 

Random Test #: 1437 

Random Test #: 1438 

Random Test #: 1439 

Random Test #: 1440 

Random Test #: 1441 

Random Test #: 1442 

Random Test #: 1443 

Random Test #: 1444 

Random Test #: 1445 

Random Test #: 1446 

Random Test #: 1447 

Random Test #: 1448 

Random Test #: 1449 

Random Test #: 1450 

Random Test #: 1451 

Random Test #: 1452 

Random Test #: 1453 

Random Test #: 1454 

Random Test #: 1455 

Random Test #: 1456 

Random Test #: 1457 

Random Test #: 1458 

Random Test #: 1459 

Random Test #: 1460 

Random Test #: 1461 

Random Test #: 1462 

Random Test #: 1463 

Random Test #: 1464 

Random Test #: 1465 

Random Test #: 1466 

Random Test #: 1467 

Random Test #: 1468 

Random Test #: 1469 

Random Test #: 1470 

Random Test #: 1471 

Random Test #: 1472 

Random Test #: 1473 

Random Test #: 1474 

Random Test #: 1475 

Random Test #: 1476 

Random Test #: 1477 

Random Test #: 1478 

Random Test #: 1479 

Random Test #: 1480 

Random Test #: 1481 

Random Test #: 1482 

Random Test #: 1483 

Random Test #: 1484 

Random Test #: 1485 

Random Test #: 1486 

Random Test #: 1487 

Random Test #: 1488 

Random Test #: 1489 

Random Test #: 1490 

Random Test #: 1491 

Random Test #: 1492 

Random Test #: 1493 

Random Test #: 1494 

Random Test #: 1495 

Random Test #: 1496 

Random Test #: 1497 

Random Test #: 1498 

Random Test #: 1499 

Random Test #: 1500 

Random Test #: 1501 

Random Test #: 1502 

Random Test #: 1503 

Random Test #: 1504 

Random Test #: 1505 

Random Test #: 1506 

Random Test #: 1507 

Random Test #: 1508 

Random Test #: 1509 

Random Test #: 1510 

Random Test #: 1511 

Random Test #: 1512 

Random Test #: 1513 

Random Test #: 1514 

Random Test #: 1515 

Random Test #: 1516 

Random Test #: 1517 

Random Test #: 1518 

Random Test #: 1519 

Random Test #: 1520 

Random Test #: 1521 

Random Test #: 1522 

Random Test #: 1523 

Random Test #: 1524 

Random Test #: 1525 

Random Test #: 1526 

Random Test #: 1527 

Random Test #: 1528 

Random Test #: 1529 

Random Test #: 1530 

Random Test #: 1531 

Random Test #: 1532 

Random Test #: 1533 

Random Test #: 1534 

Random Test #: 1535 

Random Test #: 1536 

Random Test #: 1537 

Random Test #: 1538 

Random Test #: 1539 

Random Test #: 1540 

Random Test #: 1541 

Random Test #: 1542 

Random Test #: 1543 

Random Test #: 1544 

Random Test #: 1545 

Random Test #: 1546 

Random Test #: 1547 

Random Test #: 1548 

Random Test #: 1549 

Random Test #: 1550 

Random Test #: 1551 

Random Test #: 1552 

Random Test #: 1553 

Random Test #: 1554 

Random Test #: 1555 

Random Test #: 1556 

Random Test #: 1557 

Random Test #: 1558 

Random Test #: 1559 

Random Test #: 1560 

Random Test #: 1561 

Random Test #: 1562 

Random Test #: 1563 

Random Test #: 1564 

Random Test #: 1565 

Random Test #: 1566 

Random Test #: 1567 

Random Test #: 1568 

Random Test #: 1569 

Random Test #: 1570 

Random Test #: 1571 

Random Test #: 1572 

Random Test #: 1573 

Random Test #: 1574 

Random Test #: 1575 

Random Test #: 1576 

Random Test #: 1577 

Random Test #: 1578 

Random Test #: 1579 

Random Test #: 1580 

Random Test #: 1581 

Random Test #: 1582 

Random Test #: 1583 

Random Test #: 1584 

Random Test #: 1585 

Random Test #: 1586 

Random Test #: 1587 

Random Test #: 1588 

Random Test #: 1589 

Random Test #: 1590 

Random Test #: 1591 

Random Test #: 1592 

Random Test #: 1593 

Random Test #: 1594 

Random Test #: 1595 

Random Test #: 1596 

Random Test #: 1597 

Random Test #: 1598 

Random Test #: 1599 

Random Test #: 1600 

Random Test #: 1601 

Random Test #: 1602 

Random Test #: 1603 

Random Test #: 1604 

Random Test #: 1605 

Random Test #: 1606 

Random Test #: 1607 

Random Test #: 1608 

Random Test #: 1609 

Random Test #: 1610 

Random Test #: 1611 

Random Test #: 1612 

Random Test #: 1613 

Random Test #: 1614 

Random Test #: 1615 

Random Test #: 1616 

Random Test #: 1617 

Random Test #: 1618 

Random Test #: 1619 

Random Test #: 1620 

Random Test #: 1621 

Random Test #: 1622 

Random Test #: 1623 

Random Test #: 1624 

Random Test #: 1625 

Random Test #: 1626 

Random Test #: 1627 

Random Test #: 1628 

Random Test #: 1629 

Random Test #: 1630 

Random Test #: 1631 

Random Test #: 1632 

Random Test #: 1633 

Random Test #: 1634 

Random Test #: 1635 

Random Test #: 1636 

Random Test #: 1637 

Random Test #: 1638 

Random Test #: 1639 

Random Test #: 1640 

Random Test #: 1641 

Random Test #: 1642 

Random Test #: 1643 

Random Test #: 1644 

Random Test #: 1645 

Random Test #: 1646 

Random Test #: 1647 

Random Test #: 1648 

Random Test #: 1649 

Random Test #: 1650 

Random Test #: 1651 

Random Test #: 1652 

Random Test #: 1653 

Random Test #: 1654 

Random Test #: 1655 

Random Test #: 1656 

Random Test #: 1657 

Random Test #: 1658 

Random Test #: 1659 

Random Test #: 1660 

Random Test #: 1661 

Random Test #: 1662 

Random Test #: 1663 

Random Test #: 1664 

Random Test #: 1665 

Random Test #: 1666 

Random Test #: 1667 

Random Test #: 1668 

Random Test #: 1669 

Random Test #: 1670 

Random Test #: 1671 

Random Test #: 1672 

Random Test #: 1673 

Random Test #: 1674 

Random Test #: 1675 

Random Test #: 1676 

Random Test #: 1677 

Random Test #: 1678 

Random Test #: 1679 

Random Test #: 1680 

Random Test #: 1681 

Random Test #: 1682 

Random Test #: 1683 

Random Test #: 1684 

Random Test #: 1685 

Random Test #: 1686 

Random Test #: 1687 

Random Test #: 1688 

Random Test #: 1689 

Random Test #: 1690 

Random Test #: 1691 

Random Test #: 1692 

Random Test #: 1693 

Random Test #: 1694 

Random Test #: 1695 

Random Test #: 1696 

Random Test #: 1697 

Random Test #: 1698 

Random Test #: 1699 

Random Test #: 1700 

Random Test #: 1701 

Random Test #: 1702 

Random Test #: 1703 

Random Test #: 1704 

Random Test #: 1705 

Random Test #: 1706 

Random Test #: 1707 

Random Test #: 1708 

Random Test #: 1709 

Random Test #: 1710 

Random Test #: 1711 

Random Test #: 1712 

Random Test #: 1713 

Random Test #: 1714 

Random Test #: 1715 

Random Test #: 1716 

Random Test #: 1717 

Random Test #: 1718 

Random Test #: 1719 

Random Test #: 1720 

Random Test #: 1721 

Random Test #: 1722 

Random Test #: 1723 

Random Test #: 1724 

Random Test #: 1725 

Random Test #: 1726 

Random Test #: 1727 

Random Test #: 1728 

Random Test #: 1729 

Random Test #: 1730 

Random Test #: 1731 

Random Test #: 1732 

Random Test #: 1733 

Random Test #: 1734 

Random Test #: 1735 

Random Test #: 1736 

Random Test #: 1737 

Random Test #: 1738 

Random Test #: 1739 

Random Test #: 1740 

Random Test #: 1741 

Random Test #: 1742 

Random Test #: 1743 

Random Test #: 1744 

Random Test #: 1745 

Random Test #: 1746 

Random Test #: 1747 

Random Test #: 1748 

Random Test #: 1749 

Random Test #: 1750 

Random Test #: 1751 

Random Test #: 1752 

Random Test #: 1753 

Random Test #: 1754 

Random Test #: 1755 

Random Test #: 1756 

Random Test #: 1757 

Random Test #: 1758 

Random Test #: 1759 

Random Test #: 1760 

Random Test #: 1761 

Random Test #: 1762 

Random Test #: 1763 

Random Test #: 1764 

Random Test #: 1765 

Random Test #: 1766 

Random Test #: 1767 

Random Test #: 1768 

Random Test #: 1769 

Random Test #: 1770 

Random Test #: 1771 

Random Test #: 1772 

Random Test #: 1773 

Random Test #: 1774 

Random Test #: 1775 

Random Test #: 1776 

Random Test #: 1777 

Random Test #: 1778 

Random Test #: 1779 

Random Test #: 1780 

Random Test #: 1781 

Random Test #: 1782 

Random Test #: 1783 

Random Test #: 1784 

Random Test #: 1785 

Random Test #: 1786 

Random Test #: 1787 

Random Test #: 1788 

Random Test #: 1789 

Random Test #: 1790 

Random Test #: 1791 

Random Test #: 1792 

Random Test #: 1793 

Random Test #: 1794 

Random Test #: 1795 

Random Test #: 1796 

Random Test #: 1797 

Random Test #: 1798 

Random Test #: 1799 

Random Test #: 1800 

Random Test #: 1801 

Random Test #: 1802 

Random Test #: 1803 

Random Test #: 1804 

Random Test #: 1805 

Random Test #: 1806 

Random Test #: 1807 

Random Test #: 1808 

Random Test #: 1809 

Random Test #: 1810 

Random Test #: 1811 

Random Test #: 1812 

Random Test #: 1813 

Random Test #: 1814 

Random Test #: 1815 

Random Test #: 1816 

Random Test #: 1817 

Random Test #: 1818 

Random Test #: 1819 

Random Test #: 1820 

Random Test #: 1821 

Random Test #: 1822 

Random Test #: 1823 

Random Test #: 1824 

Random Test #: 1825 

Random Test #: 1826 

Random Test #: 1827 

Random Test #: 1828 

Random Test #: 1829 

Random Test #: 1830 

Random Test #: 1831 

Random Test #: 1832 

Random Test #: 1833 

Random Test #: 1834 

Random Test #: 1835 

Random Test #: 1836 

Random Test #: 1837 

Random Test #: 1838 

Random Test #: 1839 

Random Test #: 1840 

Random Test #: 1841 

Random Test #: 1842 

Random Test #: 1843 

Random Test #: 1844 

Random Test #: 1845 

Random Test #: 1846 

Random Test #: 1847 

Random Test #: 1848 

Random Test #: 1849 

Random Test #: 1850 

Random Test #: 1851 

Random Test #: 1852 

Random Test #: 1853 

Random Test #: 1854 

Random Test #: 1855 

Random Test #: 1856 

Random Test #: 1857 

Random Test #: 1858 

Random Test #: 1859 

Random Test #: 1860 

Random Test #: 1861 

Random Test #: 1862 

Random Test #: 1863 

Random Test #: 1864 

Random Test #: 1865 

Random Test #: 1866 

Random Test #: 1867 

Random Test #: 1868 

Random Test #: 1869 

Random Test #: 1870 

Random Test #: 1871 

Random Test #: 1872 

Random Test #: 1873 

Random Test #: 1874 

Random Test #: 1875 

Random Test #: 1876 

Random Test #: 1877 

Random Test #: 1878 

Random Test #: 1879 

Random Test #: 1880 

Random Test #: 1881 

Random Test #: 1882 

Random Test #: 1883 

Random Test #: 1884 

Random Test #: 1885 

Random Test #: 1886 

Random Test #: 1887 

Random Test #: 1888 

Random Test #: 1889 

Random Test #: 1890 

Random Test #: 1891 

Random Test #: 1892 

Random Test #: 1893 

Random Test #: 1894 

Random Test #: 1895 

Random Test #: 1896 

Random Test #: 1897 

Random Test #: 1898 

Random Test #: 1899 

Random Test #: 1900 

Random Test #: 1901 

Random Test #: 1902 

Random Test #: 1903 

Random Test #: 1904 

Random Test #: 1905 

Random Test #: 1906 

Random Test #: 1907 

Random Test #: 1908 

Random Test #: 1909 

Random Test #: 1910 

Random Test #: 1911 

Random Test #: 1912 

Random Test #: 1913 

Random Test #: 1914 

Random Test #: 1915 

Random Test #: 1916 

Random Test #: 1917 

Random Test #: 1918 

Random Test #: 1919 

Random Test #: 1920 

Random Test #: 1921 

Random Test #: 1922 

Random Test #: 1923 

Random Test #: 1924 

Random Test #: 1925 

Random Test #: 1926 

Random Test #: 1927 

Random Test #: 1928 

Random Test #: 1929 

Random Test #: 1930 

Random Test #: 1931 

Random Test #: 1932 

Random Test #: 1933 

Random Test #: 1934 

Random Test #: 1935 

Random Test #: 1936 

Random Test #: 1937 

Random Test #: 1938 

Random Test #: 1939 

Random Test #: 1940 

Random Test #: 1941 

Random Test #: 1942 

Random Test #: 1943 

Random Test #: 1944 

Random Test #: 1945 

Random Test #: 1946 

Random Test #: 1947 

Random Test #: 1948 

Random Test #: 1949 

Random Test #: 1950 

Random Test #: 1951 

Random Test #: 1952 

Random Test #: 1953 

Random Test #: 1954 

Random Test #: 1955 

Random Test #: 1956 

Random Test #: 1957 

Random Test #: 1958 

Random Test #: 1959 

Random Test #: 1960 

Random Test #: 1961 

Random Test #: 1962 

Random Test #: 1963 

Random Test #: 1964 

Random Test #: 1965 

Random Test #: 1966 

Random Test #: 1967 

Random Test #: 1968 

Random Test #: 1969 

Random Test #: 1970 

Random Test #: 1971 

Random Test #: 1972 

Random Test #: 1973 

Random Test #: 1974 

Random Test #: 1975 

Random Test #: 1976 

Random Test #: 1977 

Random Test #: 1978 

Random Test #: 1979 

Random Test #: 1980 

Random Test #: 1981 

Random Test #: 1982 

Random Test #: 1983 

Random Test #: 1984 

Random Test #: 1985 

Random Test #: 1986 

Random Test #: 1987 

Random Test #: 1988 

Random Test #: 1989 

Random Test #: 1990 

Random Test #: 1991 

Random Test #: 1992 

Random Test #: 1993 

Random Test #: 1994 

Random Test #: 1995 

Random Test #: 1996 

Random Test #: 1997 

Random Test #: 1998 

Random Test #: 1999 

Random Test #: 2000 
File 'randomtestcard1.c'
Lines executed:96.49% of 57
randomtestcard1.c:creating 'randomtestcard1.c.gcov'

Smithy stats
File 'dominion.c'
Lines executed:41.61% of 644
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
    42282:   10:  if (*(int*)a > *(int*)b)
    22397:   11:    return 1;
    19885:   12:  if (*(int*)a < *(int*)b)
    19749:   13:    return -1;
      136:   14:  return 0;
    42282:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  //int it;			
        -:   44:  //set up random number generator
        3:   45:  SelectStream(1);
        3:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
        6:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        3:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
       66:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
      660:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
      570:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
      300:   66:        }
       30:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        3:   74:  if (numPlayers == 2)
        -:   75:    {
        3:   76:      state->supplyCount[curse] = 10;
        3:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        3:   88:  if (numPlayers == 2)
        -:   89:    {
        3:   90:      state->supplyCount[estate] = 8;
        3:   91:      state->supplyCount[duchy] = 8;
        3:   92:      state->supplyCount[province] = 8;
        3:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        3:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  103:  state->supplyCount[silver] = 40;
        3:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      126:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
      990:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
      465:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
       58:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
        5:  116:		  if (numPlayers == 2){ 
        5:  117:		    state->supplyCount[i] = 8; 
        5:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        5:  120:		}
        -:  121:	      else
        -:  122:		{
       25:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       30:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      435:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
      435:  131:	}
        -:  132:
       60:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       18:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
        6:  141:      state->deckCount[i] = 0;
       48:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       18:  144:	  state->deck[i][j] = estate;
       18:  145:	  state->deckCount[i]++;
       18:  146:	}
       96:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
       42:  149:	  state->deck[i][j] = copper;
       42:  150:	  state->deckCount[i]++;		
       42:  151:	}
        6:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       18:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
        6:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        6:  161:    }
        -:  162:
        -:  163:  //draw player hands
       18:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
        6:  167:      state->handCount[i] = 0;
        6:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
       72:  170:      for (j = 0; j < 5; j++)
        -:  171:      {
       30:  172:      	  drawCard(i, state);
       30:  173:      }
        6:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      168:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
       81:  179:      state->embargoTokens[i] = 0;
       81:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        3:  183:  state->outpostPlayed = 0;
        3:  184:  state->phase = 0;
        3:  185:  state->numActions = 1;
        3:  186:  state->numBuys = 1;
        3:  187:  state->playedCardCount = 0;
        3:  188:  state->whoseTurn = 0;
        3:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        -:  193:  //for (it = 0; it < 5; it++){
        -:  194:  //  drawCard(state->whoseTurn, state);
        -:  195:  //}
        -:  196:
        3:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        3:  199:  return 0;
        3:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       45:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       45:  210:  if (state->deckCount[player] < 1)
        1:  211:    return -1;
       44:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    11030:  215:  while (state->deckCount[player] > 0) {
     5471:  216:    card = floor(Random() * state->deckCount[player]);
     5471:  217:    newDeck[newDeckPos] = state->deck[player][card];
     5471:  218:    newDeckPos++;
   806598:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   397828:  220:      state->deck[player][i] = state->deck[player][i+1];
   397828:  221:    }
     5471:  222:    state->deckCount[player]--;
        -:  223:  }
    11030:  224:  for (i = 0; i < newDeckPos; i++) {
     5471:  225:    state->deck[player][i] = newDeck[i];
     5471:  226:    state->deckCount[player]++;
     5471:  227:  }
        -:  228:
       44:  229:  return 0;
       45:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
       28:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       28:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       28:  244:  if ( state->numActions < 1 )
        -:  245:    {
       23:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
        5:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
       10:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
        5:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        5:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        5:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        5:  270:  return 0;
       28:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       26:  281:  who = state->whoseTurn;
        -:  282:
       26:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       26:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       26:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       26:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       26:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       26:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       26:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       26:  309:  return 0;
       26:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
      197:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
      428:  317:  int currentPlayer = whoseTurn(state);
      428:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
       52:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
    #####:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
     4684:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       27:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      334:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      140:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      140:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      140:  360:  }
       27:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       27:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       14:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       14:  366:  }
        -:  367:  else{
       13:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       27:  371:  state->outpostPlayed = 0;
       27:  372:  state->phase = 0;
       27:  373:  state->numActions = 1;
       27:  374:  state->coins = 0;
       27:  375:  state->numBuys = 1;
       27:  376:  state->playedCardCount = 0;
       27:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      324:  381:  for (k = 0; k < 5; k++){
      135:  382:    drawCard(state->whoseTurn, state);//Draw a card
      135:  383:  }
        -:  384:
        -:  385:  //Update money
       27:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       27:  388:  return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       28:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        1:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       27:  402:  j = 0;
     1404:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      675:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
    #####:  408:	}
      675:  409:    }
       27:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
       27:  415:  return 0;
       28:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        2:  421:  int score = 0;
        -:  422:  //score from hand
       14:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
        5:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
        6:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
        6:  428:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        5:  431:    }
        -:  432:
        -:  433:  //score from discard
       46:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       21:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       23:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       24:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  442:    }
        -:  443:
        -:  444:  //score from deck
       46:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       21:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       23:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       26:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       21:  453:    }
        -:  454:
        2:  455:  return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1021479:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    10898:  534:    for (i = 0; i < state->discardCount[player];i++){
     5411:  535:      state->deck[player][i] = state->discard[player][i];
     5411:  536:      state->discard[player][i] = -1;
     5411:  537:    }
        -:  538:
       38:  539:    state->deckCount[player] = state->discardCount[player];
       38:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       38:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       38:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       38:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       38:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       38:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       38:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       38:  564:    state->deckCount[player]--;
       38:  565:    state->handCount[player]++;//Increment hand count
       38:  566:  }
        -:  567:
        -:  568:  else{
  1021441:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1021441:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1021441:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1021441:  577:    state->deckCount[player]--;
  1021441:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1021479:  581:  return 0;
  1021479:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
       52:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
       16:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
       14:  599:      return 3;
        -:  600:    case gold:
       18:  601:      return 6;
        -:  602:    case adventurer:
        4:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
       52:  645:}
        -:  646:
        -:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
     4005:  654:  int currentPlayer = whoseTurn(state);
     4005:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
     4005:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        -:  660:  
     4005:  661:  if (nextPlayer > (state->numPlayers - 1)){
     1981:  662:    nextPlayer = 0;
     1981:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     4005:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
     2005:  670:      return adventurer_effect(state, currentPlayer);
        -:  671:
        -:  672:    case council_room:
    #####:  673:      return council_room_effect(currentPlayer, state, handPos);
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
    #####:  688:	if (supplyCount(choice1, state) <= 0){
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
    #####:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
    #####:  697:	  printf("That card is too expensive!\n");
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
    #####:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
    #####:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:		
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:	{
    #####:  757:	  if (state->hand[currentPlayer][i] == j)
        -:  758:	    {
    #####:  759:	      discardCard(i, currentPlayer, state, 0);			
    #####:  760:	      break;
        -:  761:	    }
    #####:  762:	}
        -:  763:			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:
    #####:  769:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      gainCard(choice2, state, 0, currentPlayer);
        -:  775:
        -:  776:      //discard card from hand
    #####:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:      //discard trashed card
    #####:  780:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  781:	{
    #####:  782:	  if (state->hand[currentPlayer][i] == j)
        -:  783:	    {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);			
    #####:  785:	      break;
        -:  786:	    }
    #####:  787:	}
        -:  788:
        -:  789:
    #####:  790:      return 0;
        -:  791:		
        -:  792:    case smithy:
     2000:  793:      return smithy_effect(currentPlayer, state, handPos);
        -:  794:		
        -:  795:    case village:
    #####:  796:      return village_effect(currentPlayer, state, handPos);
        -:  797:    
        -:  798:    case baron:
    #####:  799:      return baron_effect(currentPlayer, state, handPos, choice1);
        -:  800:		
        -:  801:    case great_hall:
        -:  802:      //+1 Card
    #####:  803:      drawCard(currentPlayer, state);
        -:  804:			
        -:  805:      //+1 Actions
    #####:  806:      state->numActions++;
        -:  807:			
        -:  808:      //discard card from hand
    #####:  809:      discardCard(handPos, currentPlayer, state, 0);
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case minion:
        -:  813:      //+1 action
    #####:  814:      state->numActions++;
        -:  815:			
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
        -:  818:			
    #####:  819:      if (choice1)		//+2 coins
        -:  820:	{
    #####:  821:	  state->coins = state->coins + 2;
    #####:  822:	}
        -:  823:			
    #####:  824:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  825:	{
        -:  826:	  //discard hand
    #####:  827:	  while(numHandCards(state) > 0)
        -:  828:	    {
    #####:  829:	      discardCard(handPos, currentPlayer, state, 0);
        -:  830:	    }
        -:  831:				
        -:  832:	  //draw 4
    #####:  833:	  for (i = 0; i < 4; i++)
        -:  834:	    {
    #####:  835:	      drawCard(currentPlayer, state);
    #####:  836:	    }
        -:  837:				
        -:  838:	  //other players discard hand and redraw if hand size > 4
    #####:  839:	  for (i = 0; i < state->numPlayers; i++)
        -:  840:	    {
    #####:  841:	      if (i != currentPlayer)
        -:  842:		{
    #####:  843:		  if ( state->handCount[i] > 4 )
        -:  844:		    {
        -:  845:		      //discard hand
    #####:  846:		      while( state->handCount[i] > 0 )
        -:  847:			{
    #####:  848:			  discardCard(handPos, i, state, 0);
        -:  849:			}
        -:  850:							
        -:  851:		      //draw 4
    #####:  852:		      for (j = 0; j < 4; j++)
        -:  853:			{
    #####:  854:			  drawCard(i, state);
    #####:  855:			}
    #####:  856:		    }
    #####:  857:		}
    #####:  858:	    }
        -:  859:				
    #####:  860:	}
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case steward:
    #####:  864:      if (choice1 == 1)
        -:  865:	{
        -:  866:	  //+2 cards
    #####:  867:	  drawCard(currentPlayer, state);
    #####:  868:	  drawCard(currentPlayer, state);
    #####:  869:	}
    #####:  870:      else if (choice1 == 2)
        -:  871:	{
        -:  872:	  //+2 coins
    #####:  873:	  state->coins = state->coins + 2;
    #####:  874:	}
        -:  875:      else
        -:  876:	{
        -:  877:	  //trash 2 cards in hand
    #####:  878:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  879:	  discardCard(choice3, currentPlayer, state, 1);
        -:  880:	}
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case tribute:
    #####:  887:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  888:	if (state->deckCount[nextPlayer] > 0){
    #####:  889:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  890:	  state->deckCount[nextPlayer]--;
    #####:  891:	}
    #####:  892:	else if (state->discardCount[nextPlayer] > 0){
    #####:  893:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  894:	  state->discardCount[nextPlayer]--;
    #####:  895:	}
        -:  896:	else{
        -:  897:	  //No Card to Reveal
        -:  898:	  if (DEBUG){
        -:  899:	    printf("No cards to reveal\n");
        -:  900:	  }
        -:  901:	}
    #####:  902:      }
        -:  903:	    
        -:  904:      else{
    #####:  905:	if (state->deckCount[nextPlayer] == 0){
    #####:  906:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  907:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  908:	    state->deckCount[nextPlayer]++;
    #####:  909:	    state->discard[nextPlayer][i] = -1;
    #####:  910:	    state->discardCount[nextPlayer]--;
    #####:  911:	  }
        -:  912:			    
    #####:  913:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  914:	} 
    #####:  915:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  917:	state->deckCount[nextPlayer]--;
    #####:  918:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
        -:  921:      }    
        -:  922:		       
    #####:  923:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  924:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  925:	state->playedCardCount++;
    #####:  926:	tributeRevealedCards[1] = -1;
    #####:  927:      }
        -:  928:
    #####:  929:      for (i = 0; i <= 2; i ++){
    #####:  930:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  931:	  state->coins += 2;
    #####:  932:	}
        -:  933:		    
    #####:  934:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  935:	  drawCard(currentPlayer, state);
    #####:  936:	  drawCard(currentPlayer, state);
    #####:  937:	}
        -:  938:	else{//Action Card
    #####:  939:	  state->numActions = state->numActions + 2;
        -:  940:	}
    #####:  941:      }
        -:  942:	    
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case ambassador:
    #####:  946:      j = 0;		//used to check if player has enough cards to discard
        -:  947:
    #####:  948:      if (choice2 > 2 || choice2 < 0)
        -:  949:	{
    #####:  950:	  return -1;				
        -:  951:	}
        -:  952:
    #####:  953:      if (choice1 == handPos)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  959:	{
    #####:  960:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  961:	    {
    #####:  962:	      j++;
    #####:  963:	    }
    #####:  964:	}
    #####:  965:      if (j < choice2)
        -:  966:	{
    #####:  967:	  return -1;				
        -:  968:	}
        -:  969:
        -:  970:      if (DEBUG) 
        -:  971:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:
        -:  973:      //increase supply count for choosen card by amount being discarded
    #####:  974:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  975:			
        -:  976:      //each other player gains a copy of revealed card
    #####:  977:      for (i = 0; i < state->numPlayers; i++)
        -:  978:	{
    #####:  979:	  if (i != currentPlayer)
        -:  980:	    {
    #####:  981:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  982:	    }
    #####:  983:	}
        -:  984:
        -:  985:      //discard played card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);			
        -:  987:
        -:  988:      //trash copies of cards returned to supply
    #####:  989:      for (j = 0; j < choice2; j++)
        -:  990:	{
    #####:  991:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  992:	    {
    #####:  993:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  994:		{
    #####:  995:		  discardCard(i, currentPlayer, state, 1);
    #####:  996:		  break;
        -:  997:		}
    #####:  998:	    }
    #####:  999:	}			
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case cutpurse:
        -: 1004:
    #####: 1005:      updateCoins(currentPlayer, state, 2);
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
        -: 1009:	    {
    #####: 1010:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1011:		{
    #####: 1012:		  if (state->hand[i][j] == copper)
        -: 1013:		    {
    #####: 1014:		      discardCard(j, i, state, 0);
    #####: 1015:		      break;
        -: 1016:		    }
    #####: 1017:		  if (j == state->handCount[i])
        -: 1018:		    {
    #####: 1019:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1020:			{
        -: 1021:			  if (DEBUG)
        -: 1022:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1023:			}	
    #####: 1024:		      break;
        -: 1025:		    }		
    #####: 1026:		}
        -: 1027:					
    #####: 1028:	    }
        -: 1029:				
    #####: 1030:	}				
        -: 1031:
        -: 1032:      //discard played card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:
        -: 1037:		
        -: 1038:    case embargo: 
        -: 1039:      //+2 Coins
    #####: 1040:      state->coins = state->coins + 2;
        -: 1041:			
        -: 1042:      //see if selected pile is in play
    #####: 1043:      if ( state->supplyCount[choice1] == -1 )
        -: 1044:	{
    #####: 1045:	  return -1;
        -: 1046:	}
        -: 1047:			
        -: 1048:      //add embargo token to selected supply pile
    #####: 1049:      state->embargoTokens[choice1]++;
        -: 1050:			
        -: 1051:      //trash card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case outpost:
        -: 1056:      //set outpost flag
    #####: 1057:      state->outpostPlayed++;
        -: 1058:			
        -: 1059:      //discard card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case salvager:
        -: 1064:      //+1 buy
    #####: 1065:      state->numBuys++;
        -: 1066:			
    #####: 1067:      if (choice1)
        -: 1068:	{
        -: 1069:	  //gain coins equal to trashed card
    #####: 1070:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1071:	  //trash card
    #####: 1072:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1073:	}
        -: 1074:			
        -: 1075:      //discard card
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1085:	}
    #####: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
    #####: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
     4005: 1121:}
        -: 1122:
        -: 1123:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1124:{
        -: 1125:	
        -: 1126:  //if card is not trashed, added to Played pile 
     4000: 1127:  if (trashFlag < 1)
        -: 1128:    {
        -: 1129:      //add card to played pile
     4000: 1130:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4000: 1131:      state->playedCardCount++;
     4000: 1132:    }
        -: 1133:	
        -: 1134:  //set played card to -1
     4000: 1135:  state->hand[currentPlayer][handPos] = -1;
        -: 1136:	
        -: 1137:  //remove card from player's hand
     4000: 1138:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1139:    {
        -: 1140:      //reduce number of cards in hand
    #####: 1141:      state->handCount[currentPlayer]--;
    #####: 1142:    }
     4000: 1143:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1144:    {
        -: 1145:      //reduce number of cards in hand
    #####: 1146:      state->handCount[currentPlayer]--;
    #####: 1147:    }
        -: 1148:  else 	
        -: 1149:    {
        -: 1150:      //replace discarded card with last card in hand
     4000: 1151:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1152:      //set last card to -1
     4000: 1153:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1154:      //reduce number of cards in hand
     4000: 1155:      state->handCount[currentPlayer]--;
        -: 1156:    }
        -: 1157:	
     4000: 1158:  return 0;
        -: 1159:}
        -: 1160:
        -: 1161:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1162:{
        -: 1163:  //Note: supplyPos is enum of choosen card
        -: 1164:	
        -: 1165:  //check if supply pile is empty (0) or card is not used in game (-1)
       26: 1166:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1167:    {
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //added card for [whoseTurn] current player:
        -: 1172:  // toFlag = 0 : add to discard
        -: 1173:  // toFlag = 1 : add to deck
        -: 1174:  // toFlag = 2 : add to hand
        -: 1175:
       26: 1176:  if (toFlag == 1)
        -: 1177:    {
    #####: 1178:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1179:      state->deckCount[player]++;
    #####: 1180:    }
       26: 1181:  else if (toFlag == 2)
        -: 1182:    {
    #####: 1183:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1184:      state->handCount[player]++;
    #####: 1185:    }
        -: 1186:  else
        -: 1187:    {
       26: 1188:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       26: 1189:      state->discardCount[player]++;
        -: 1190:    }
        -: 1191:	
        -: 1192:  //decrease number in supply pile
       26: 1193:  state->supplyCount[supplyPos]--;
        -: 1194:	 
       26: 1195:  return 0;
       26: 1196:}
        -: 1197:
        -: 1198:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1199:{
        -: 1200:  int i;
        -: 1201:	
        -: 1202:  //reset coin count
       35: 1203:  state->coins = 0;
        -: 1204:
        -: 1205:  //add coins for each Treasure card in player's hand
      410: 1206:  for (i = 0; i < state->handCount[player]; i++)
        -: 1207:    {
      170: 1208:      if (state->hand[player][i] == copper)
        -: 1209:	{
       54: 1210:	  state->coins += 1;
       54: 1211:	}
      116: 1212:      else if (state->hand[player][i] == silver)
        -: 1213:	{
       44: 1214:	  state->coins += 2;
       44: 1215:	}
       72: 1216:      else if (state->hand[player][i] == gold)
        -: 1217:	{
       19: 1218:	  state->coins += 3;
       19: 1219:	}	
      170: 1220:    }	
        -: 1221:
        -: 1222:  //add bonus
       35: 1223:  state->coins += bonus;
        -: 1224:
       35: 1225:  return 0;
        -: 1226:}
        -: 1227:
        -: 1228:int smithy_effect(int currentPlayer, struct gameState *state, int handPos){ //draw 3 cards
        -: 1229:    int i;
    16000: 1230:    for (i = 0; i < 3; i++)
        -: 1231:    {
     6000: 1232:      drawCard(currentPlayer, state);
     6000: 1233:    }
        -: 1234:        
        -: 1235:    //discard card from hand
     2000: 1236:    discardCard(handPos, currentPlayer, state, 0);
     2000: 1237:    return -1;
        -: 1238:}
        -: 1239:
        -: 1240:int adventurer_effect(struct gameState *state, int currentPlayer){
        -: 1241:    int cardDrawn;
        -: 1242:    int temphand[MAX_HAND];
     2005: 1243:    int z = 0;
     2005: 1244:    int drawntreasure=0;
        -: 1245:    //printf("Inside Adventurer \n");
  1013340: 1246:    while(drawntreasure<2){
   504665: 1247:        if (state->deckCount[currentPlayer] <2){//if the deck is empty we need to shuffle discard and add to deck
        1: 1248:            shuffle(currentPlayer, state);
        1: 1249:        }
   504665: 1250:        drawCard(currentPlayer, state);
   504665: 1251:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1509983: 1252:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4010: 1253:            drawntreasure++;
        -: 1254:        else{
   500655: 1255:            temphand[z]=cardDrawn;
   500655: 1256:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   500655: 1257:            z++;
        -: 1258:        }
        -: 1259:    }
  1005320: 1260:    while(z-1>=0){
   500655: 1261:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   500655: 1262:        z=z-1;
        -: 1263:    }
     2005: 1264:    return 0;
        -: 1265:}
        -: 1266:
        -: 1267:int village_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1268://+1 Card
    #####: 1269:    drawCard(currentPlayer, state);
        -: 1270:        
        -: 1271:    //+2 Actions 
    #####: 1272:    state->numActions = state->numActions + 2;
        -: 1273:        
        -: 1274:    //discard played card from hand
    #####: 1275:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1276:    return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int baron_effect(int currentPlayer, struct gameState *state, int handPos, int choice1){
    #####: 1280:    state->numBuys++;//Increase buys by 1!
    #####: 1281:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1282:	int p = 0;//Iterator for hand!
    #####: 1283:	int card_not_discarded = 0;//Flag for discard set!
    #####: 1284:	while(card_not_discarded){
    #####: 1285:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1286:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1287:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1288:	    state->discardCount[currentPlayer]++;
    #####: 1289:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1290:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1291:	    }
    #####: 1292:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1293:	    state->handCount[currentPlayer]--;
    #####: 1294:	    card_not_discarded = 0;//Exit the loop
    #####: 1295:	  }
    #####: 1296:	  else if (p > state->handCount[currentPlayer]){
        -: 1297:	    if(DEBUG) {
        -: 1298:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1299:	      printf("Must gain an estate if there are any\n");
        -: 1300:	    }
    #####: 1301:	    if (supplyCount(estate, state) > 0){
    #####: 1302:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1303:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1304:	      if (supplyCount(estate, state) == 0){
    #####: 1305:		isGameOver(state);
    #####: 1306:	      }
    #####: 1307:	    }
    #####: 1308:	    card_not_discarded = 0;//Exit the loop
    #####: 1309:	  }
        -: 1310:			    
        -: 1311:	  else{
    #####: 1312:	    p++;//Next card
        -: 1313:	  }
        -: 1314:	}
    #####: 1315:      }
        -: 1316:			    
        -: 1317:      else{
    #####: 1318:	if (supplyCount(estate, state) > 0){
    #####: 1319:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1320:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1321:	  if (supplyCount(estate, state) == 0){
    #####: 1322:	    isGameOver(state);
    #####: 1323:	  }
    #####: 1324:	}
        -: 1325:      }
    #####: 1326:    return 0;
        -: 1327:}
        -: 1328:
        -: 1329:int council_room_effect(int currentPlayer, struct gameState *state, int handPos){
        -: 1330:    int i;
        -: 1331:    
        -: 1332:    //+4 Cards
    #####: 1333:      for (i = 0; i < 4; i++)
        -: 1334:	{
    #####: 1335:	  drawCard(currentPlayer, state);
    #####: 1336:	}
        -: 1337:			
        -: 1338:      //+1 Buy
    #####: 1339:      state->numBuys++;
        -: 1340:			
        -: 1341:      //Each other player draws a card
    #####: 1342:      for (i = 0; i < state->numPlayers; i++)
        -: 1343:	{
    #####: 1344:	  if ( i != currentPlayer )
        -: 1345:	    {
    #####: 1346:	      drawCard(i, state);
    #####: 1347:	    }
    #####: 1348:	}
        -: 1349:			
        -: 1350:      //put played card in played card pile
    #####: 1351:      discardCard(handPos, currentPlayer, state, 0);
        -: 1352:
    #####: 1353:      return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of cards.c
        -: 1358://end of dominion.c
        -: 1359:
