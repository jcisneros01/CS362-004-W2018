        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:void assertEqual(int expected, int actual) {
       17:   10:    if (expected == actual) {
       17:   11:        printf("Test Passed\n\n");
       17:   12:    } else {
    #####:   13:         printf("Test Failed\n\n");
        -:   14:    }
       17:   15:}
        -:   16:
        -:   17:int main() {
        -:   18:
        -:   19:	// card variables
        1:   20:	int card = smithy;
        1:   21:	int choice1 = 0;
        1:   22:	int choice2 = 0;
        1:   23:	int choice3 = 0;
        1:   24:	int handPos = 0;
        1:   25:	int bonus = 0;
        -:   26:
        -:   27:     // Game init variables
        1:   28:    int numberOfPlayers = 2;
        1:   29:    int kindomCards[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   30:    int randomSeed = 1000;
        -:   31:	struct gameState State, StateCopy;
        -:   32:
        -:   33:    // init game
        1:   34:    initializeGame(numberOfPlayers,kindomCards,randomSeed,&State);    
        -:   35:
        -:   36:	// Copy game state
        1:   37:	memcpy(&StateCopy, &State, sizeof(struct gameState));
        -:   38:
        1:   39:	printf("Testing Card: Smithy\n");
        -:   40:
        -:   41:	// play card
        1:   42:	cardEffect(card, choice1, choice2, choice3, &State, handPos, &bonus);
        -:   43:
        -:   44:	// Current player should receive exact 3 cards.
        1:   45:	printf("TEST 1: hand +3 cards\n");
        1:   46:	printf("hand count = %d, expected = %d\n", State.handCount[0], StateCopy.handCount[0] + 2);
        1:   47:	assertEqual(StateCopy.handCount[0] + 2, State.handCount[0]);
        -:   48:
        -:   49:	// cards should come from his own pile.
        1:   50:	printf("TEST 2: deck -3 cards\n");
        1:   51:	printf("deck count = %d, expected = %d\n", State.deckCount[0], StateCopy.deckCount[0] - 3);
        1:   52:	assertEqual(StateCopy.deckCount[0] - 3, State.deckCount[0]);
        -:   53:
        -:   54:	// No state change should occur for other players.
        1:   55:	printf("TEST 3: No change to player's Deck or Hand\n");
        1:   56:	printf("deck count = %d, expected = %d\n", State.deckCount[1], StateCopy.deckCount[1]);
        1:   57:	assertEqual(StateCopy.deckCount[1], State.deckCount[1]);
        1:   58:	printf("hand count = %d, expected = %d\n", State.handCount[1], StateCopy.handCount[1]);
        1:   59:	assertEqual(StateCopy.handCount[1], State.handCount[1]);
        -:   60:
        -:   61:	// No state change should occur to the victory card piles 
        1:   62:	printf("TEST 4: No change to victory card piles\n");
        8:   63:	for (int i = 1; i <= 3; i++) {
        3:   64:		printf("Card # %d: count = %d, expected = %d\n", i , State.supplyCount[i], StateCopy.supplyCount[i]);
        3:   65:		assertEqual(StateCopy.supplyCount[i], State.supplyCount[i]);
        3:   66:	}
        -:   67:	
        -:   68:	// No state change should occur to the kingdom card piles 
        1:   69:	printf("TEST 5: No change to kindom card piles\n");
       22:   70:	for (int i = 0; i < 10; i++) {
       10:   71:		printf("Card # %d: count = %d, expected = %d\n", kindomCards[i] , State.supplyCount[kindomCards[i]], StateCopy.supplyCount[kindomCards[i]]);
       10:   72:		assertEqual(StateCopy.supplyCount[kindomCards[i]], State.supplyCount[kindomCards[i]]);
       10:   73:	}
        -:   74:
        -:   75:
        1:   76:	return 0;
        -:   77:}
        -:   78:
        -:   79:
