        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:void assertEqual(int expected, int actual) {
    #####:   12:    if (expected == actual) {
    #####:   13:        printf("Test Passed\n\n");
    #####:   14:    } else {
    #####:   15:         printf("Test Failed\n\n");
        -:   16:    }
    #####:   17:}
        -:   18:
        -:   19:void testAdventurerCard(int player, struct gameState *post) {
        -:   20:
        1:   21:}
        -:   22:
        -:   23:int main() {
        -:   24:
        1:   25:	srand(time(NULL));
        -:   26:	
        -:   27:	// card variables
        1:   28:	int card = adventurer;
        1:   29:	int choice1 = 0;
        1:   30:	int choice2 = 0;
        1:   31:	int choice3 = 0;
        1:   32:	int handPos = 0;
        1:   33:	int bonus = 0;
        -:   34:
        -:   35:     // Game init variables
        1:   36:    int numberOfPlayers = 2;
        1:   37:    int kindomCards[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   38:    int randomSeed = 1000;
        -:   39:	struct gameState G;
        -:   40:
        1:   41:	printf("Testing Card: Adventurer\n");
        1:   42:	printf ("RANDOM TESTS.\n");
        -:   43:
        -:   44:    // init game
        1:   45:    initializeGame(numberOfPlayers,kindomCards,randomSeed,&G);    
        -:   46:
        -:   47:	// iterate through tests
        4:   48:	for (int i = 0; i < 2000; i++)	 {
        -:   49:
        -:   50:		// randomly init game state
    52602:   51:		for (i = 0; i < sizeof(struct gameState); i++) {
    26300:   52:			((char*)&G)[i] = floor(Random() * 256);
    26300:   53:		}
        -:   54:
        -:   55:		// generate random function inputs
        1:   56:		int currentPlayer = floor(Random() * 2);
        -:   57:
        -:   58:		// randomize hand
        1:   59:		G.deckCount[currentPlayer] = floor(Random() * MAX_DECK);
        1:   60:		G.discardCount[currentPlayer] = floor(Random() * MAX_DECK);
        1:   61:		G.handCount[currentPlayer] = floor(Random() * MAX_HAND);
        -:   62:		
        -:   63:		
        -:   64:		// call test function
        1:   65:		testAdventurerCard(currentPlayer, &G);
        -:   66:
        1:   67:	}
        -:   68:
        -:   69:
        1:   70:	return 0;
        -:   71:}
