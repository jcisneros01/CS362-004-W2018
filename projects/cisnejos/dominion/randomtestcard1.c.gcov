        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1: 
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <math.h>
        -:    8:
        -:    9:void assertEqual(int expected, int actual, char *string ) {
    36000:   10:    if (expected == actual) {
        -:   11:        // printf("Test Passed\n\n");
    31993:   12:    } else {
     4007:   13:         printf("%s - ", string);
     4007:   14:         printf("Test Failed\n");
        -:   15:    }
    36000:   16:}
        -:   17:
        -:   18:void checkSmithyEffects(int currentPlayer, struct gameState *post) {
        -:   19:
        -:   20:	// copy game state
        -:   21:	struct gameState pre;	  
     2000:   22:	memcpy (&pre, post, sizeof(struct gameState));
        -:   23:
        -:   24:	// set player 2
        -:   25:	int otherPlayer;
     2000:   26:	if (currentPlayer == 1) {
     1010:   27:		otherPlayer = 0;
     1010:   28:	} else {
      990:   29:		otherPlayer = 1;
        -:   30:	}
        -:   31:	
     2000:   32:	int card = smithy;
     2000:   33:	int choice1 = 0;
     2000:   34:	int choice2 = 0;
     2000:   35:	int choice3 = 0;
     2000:   36:	int handPos = 0;
     2000:   37:	int bonus = 0;
        -:   38:
        -:   39:	// play card
     2000:   40:	cardEffect(card, choice1, choice2, choice3, post, handPos, &bonus);
        -:   41:
        -:   42:	// get expected state
    16000:   43:	for (int i = 1;  i <= 3; i++) {
     6000:   44:	 drawCard(currentPlayer, &pre);
     6000:   45:	}
        -:   46:
     2000:   47:	discardCard(handPos, currentPlayer, &pre, 0);
        -:   48:
        -:   49:	// check output
     2000:   50:	assertEqual(pre.handCount[currentPlayer], post->handCount[currentPlayer], "Test 1: handCount");
        -:   51:
     2000:   52:	assertEqual(pre.deckCount[currentPlayer], post->deckCount[currentPlayer], "Test 2: deckCount");
        -:   53:
     2000:   54:	assertEqual(pre.discardCount[currentPlayer], post->discardCount[currentPlayer], "Test 3: discardCount");
        -:   55:
        -:   56:	// no state change should occur for other players.
     2000:   57:	assertEqual(pre.deckCount[otherPlayer], post->deckCount[otherPlayer], "TEST 5A: No change to player's Deck");
     2000:   58:	assertEqual(pre.handCount[otherPlayer], post->handCount[otherPlayer], "TEST 5B: No change to player's Deck");	
        -:   59:
        -:   60:	// No state change should occur to the victory card piles 
    16000:   61:	for (int i = 1; i <= 3; i++) {
     6000:   62:		assertEqual(pre.supplyCount[i], post->supplyCount[i], "TEST 6: No change to victory card piles");
     6000:   63:	}
        -:   64:
        -:   65:	// No state change should occur to the kingdom card piles 
     2000:   66:	int kindomCards[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
    44000:   67:	for (int i = 0; i < 10; i++) {
    20000:   68:		assertEqual(pre.supplyCount[kindomCards[i]], post->supplyCount[kindomCards[i]], "TEST 7: No change to kindom card piles");
    20000:   69:	}
        -:   70:	
     2000:   71:}
        -:   72:
        -:   73:int main() {
        -:   74:
        -:   75:	// Game init variables
        1:   76:    int numberOfPlayers = 2;
        1:   77:    int kindomCards[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   78:    int randomSeed = 1000;
        -:   79:	struct gameState G;
        -:   80:
        -:   81:
        -:   82:    // init game
        1:   83:    initializeGame(numberOfPlayers,kindomCards,randomSeed,&G);  
        -:   84:
        1:   85:	printf("Testing Card: Smithy\n");
        -:   86:
        1:   87:	SelectStream(2);
        1:   88:  	PutSeed(3);
        -:   89:
        -:   90:	// iterate through tests
     4002:   91:	for (int i = 1; i <= 2000; i++)	 {
        -:   92:
        -:   93:		// create random game state
105204000:   94:		for (int j = 0; j < sizeof(struct gameState); j++) {
 52600000:   95:		  ((char*)&G)[j] = floor(Random() * 256);
 52600000:   96:		}
        -:   97:		
        -:   98:		// generate random function inputs
    12000:   99:		for (int i = 0; i < 2; i++) {
     4000:  100:			G.deckCount[i] = floor(Random() * MAX_DECK);
     4000:  101:			G.discardCount[i] = floor(Random() * MAX_DECK);
     4000:  102:			G.handCount[i] = floor(Random() * MAX_HAND);
     4000:  103:		}
     2000:  104:		int p = floor(Random() * 2);
     2000:  105:		G.whoseTurn = p;
     2000:  106:		G.playedCardCount = floor(Random() * (MAX_DECK-1));
        -:  107:
     2000:  108:		printf("\nRandom Test #: %d \n", i);
        -:  109:		
        -:  110:		// call test function
     2000:  111:		checkSmithyEffects(p, &G);
        -:  112:
     2000:  113:	}
        -:  114:
        1:  115:	return 0;
        -:  116:}
        -:  117:
