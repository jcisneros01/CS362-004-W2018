        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:void assertEqual(int expected, int actual) {
        4:   11:    if (expected == actual) {
        4:   12:        printf("Test Passed\n\n");
        4:   13:    } else {
    #####:   14:         printf("Test Failed\n\n");
        -:   15:    }
        4:   16:}
        -:   17:
        -:   18:int main() {
        -:   19:
        1:   20:    srand(time(NULL)); // Seed Random func
        -:   21:
        -:   22:    // Game init variables
        1:   23:    int numberOfPlayers = 2;
        1:   24:    int kindomCards[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   25:    int randomSeed = 1000;
        -:   26:    struct gameState State;
        -:   27:
        -:   28:    // Update Coins variables
        1:   29:    int player = 0;
        -:   30:    int bonus;
        -:   31:
        -:   32:    // print heading
        1:   33:    printf ("TESTING updateCoins():\n");
        -:   34:
        -:   35:    // init game
        1:   36:    initializeGame(numberOfPlayers,kindomCards,randomSeed,&State);
        -:   37:
        -:   38:    // test hand of all gold 
       12:   39:        for (int i = 0; i < 5; i++) {
        5:   40:            State.hand[player][i] = gold;
        5:   41:        }
        -:   42:
        1:   43:        bonus = rand() % 7;
        -:   44:
        1:   45:        updateCoins(player, &State, bonus);
        -:   46:
        1:   47:        printf("All Gold Test\n");
        -:   48:
        -:   49:        // print cost
        1:   50:        printf("Actual Coin Total: %d, Expected Coin Total: %d\n", State.coins, 15 + bonus);
        -:   51:
        1:   52:        assertEqual(15 + bonus, State.coins);
        -:   53:
        -:   54:    // test hand of all silver 
       12:   55:        for (int i = 0; i < 5; i++) {
        5:   56:            State.hand[player][i] = silver;
        5:   57:        }
        -:   58:
        1:   59:        bonus = rand() % 7;
        -:   60:
        1:   61:        updateCoins(player, &State, bonus);
        -:   62:
        -:   63:        // print card
        1:   64:        printf("All Silver Test\n");
        -:   65:
        -:   66:        // print cost
        1:   67:        printf("Actual Coin Total: %d, Expected Coin Total: %d\n", State.coins, 10 + bonus);
        -:   68:
        1:   69:        assertEqual(10 + bonus, State.coins);
        -:   70:
        -:   71:    // test hand of all copper 
       12:   72:        for (int i = 0; i < 5; i++) {
        5:   73:            State.hand[player][i] = copper;
        5:   74:        }
        -:   75:
        1:   76:        bonus = rand() % 7;
        -:   77:
        1:   78:        updateCoins(player, &State, bonus);
        -:   79:
        1:   80:        printf("All Copper Test\n");
        -:   81:
        -:   82:        // print cost
        1:   83:        printf("Actual Coin Total: %d, Expected Coin Total: %d\n", State.coins, 5 + bonus);
        -:   84:
        1:   85:        assertEqual(5 + bonus, State.coins);
        -:   86:
        -:   87:    // test hand of random mix
        -:   88:        int treasureCard; // current card
        1:   89:        int expectedCoinTotal = 0; 
        -:   90:
       12:   91:        for (int i = 0; i < 5; i++) {
        -:   92:            
        -:   93:            // get random card
       10:   94:            treasureCard = rand() % (6 + 1 - 4) + 4; 
        -:   95:            
        -:   96:            // Set random card
       10:   97:            State.hand[player][i] = treasureCard;
        -:   98:            
        -:   99:            // add to total
       10:  100:            switch(treasureCard) {
        -:  101:                case 4:
    #####:  102:                    expectedCoinTotal += 1;
    #####:  103:                    break;
        -:  104:                case 5:
        4:  105:                    expectedCoinTotal += 2;
        4:  106:                    break;
        -:  107:                case 6:
        1:  108:                    expectedCoinTotal += 3;
        1:  109:                    break;
        -:  110:            }
        5:  111:        }
        -:  112:
        1:  113:        bonus = rand() % 7;
        -:  114:
        1:  115:        updateCoins(player, &State, bonus);
        -:  116:
        1:  117:        printf("Random Mix Test\n");
        -:  118:
        -:  119:        // print cost
        1:  120:        printf("Actual Coin Total: %d, Expected Coin Total: %d\n", State.coins, expectedCoinTotal + bonus);
        -:  121:
        1:  122:        assertEqual(expectedCoinTotal + bonus, State.coins);
        -:  123:
        1:  124:    return 0;
        -:  125:}
